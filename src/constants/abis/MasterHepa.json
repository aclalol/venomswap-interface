{
  "address": "0x580313Da32177bd8d873FaCA272A43Fc0A663236",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract HepaToken",
          "name": "_govToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_halvingAfterBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardMultiplier",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blockDeltaStartStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blockDeltaEndStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_userFeeStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_devFeeStage",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AuthorizedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AuthorizedRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        }
      ],
      "name": "SendHepaTokenReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FINISH_BONUS_AT_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "HALVING_AT_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_LOCK_BONUS_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "REWARD_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAdd",
          "type": "address"
        }
      ],
      "name": "addAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockDeltaEndStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockDeltaStartStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFinish",
          "type": "uint256"
        }
      ],
      "name": "bonusFinishUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        }
      ],
      "name": "dev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "devFeeStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGlobalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getNewRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "getPoolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "forFarmer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govToken",
      "outputs": [
        {
          "internalType": "contract HepaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newHalving",
          "type": "uint256[]"
        }
      ],
      "name": "halvingUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newlock",
          "type": "uint256"
        }
      ],
      "name": "lockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accGovTokenPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "reclaimTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newMulReward",
          "type": "uint256[]"
        }
      ],
      "name": "rewardMulUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newReward",
          "type": "uint256"
        }
      ],
      "name": "rewardUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newstarblock",
          "type": "uint256"
        }
      ],
      "name": "starBlockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "userDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userFeeStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userGlobalInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebtAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDepositBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29a56906b02ca52b6e5d86f0b8b26dffd3136d76683ed643cbab64c1e61a388d",
  "receipt": {
    "to": null,
    "from": "0x7618ba6355Acf36dD686FD5EbFebA8fEfEf93B71",
    "contractAddress": "0x580313Da32177bd8d873FaCA272A43Fc0A663236",
    "transactionIndex": 49,
    "gasUsed": "8033983",
    "logsBloom": "0x
    "blockHash": "0xc2cfacc1357cb187e0a59751dec2f6fbd2f4944d14a820a466b09353503162a5",
    "transactionHash": "0x29a56906b02ca52b6e5d86f0b8b26dffd3136d76683ed643cbab64c1e61a388d",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 8806289,
        "transactionHash": "0x29a56906b02ca52b6e5d86f0b8b26dffd3136d76683ed643cbab64c1e61a388d",
        "address": "0x580313Da32177bd8d873FaCA272A43Fc0A663236",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007618ba6355acf36dd686fd5ebfeba8fefef93b71"
        ],
        "data": "0x",
        "logIndex": 198,
        "blockHash": "0xc2cfacc1357cb187e0a59751dec2f6fbd2f4944d14a820a466b09353503162a5"
      }
    ],
    "blockNumber": 8806289,
    "cumulativeGasUsed": "15223590",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9159F30F1c3F0317b0a2D6bC176f29266Be790eE",
    "0x7618ba6355Acf36dD686FD5EbFebA8fEfEf93B71",
    "1000000000000000000",
    8869091,
    201600,
    [
      256,
      128,
      64,
      32,
      16,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8
    ],
    [0, 1, 1201, 28801, 86401, 144001, 403201, 115201],
    [1200, 28800, 86400, 144000, 403200, 115200],
    [75, 92, 96, 98, 99, 995, 9975, 9999],
    [25, 8, 4, 2, 1, 5, 25, 1]
  ],
  "solcInputHash": "885529c1d2ec087e15344f0f8efd0dc5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract HepaToken\",\"name\":\"_govToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAfterBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaStartStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaEndStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userFeeStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_devFeeStage\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AuthorizedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AuthorizedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendHepaTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FINISH_BONUS_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HALVING_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_LOCK_BONUS_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REWARD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaEndStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaStartStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFinish\",\"type\":\"uint256\"}],\"name\":\"bonusFinishUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"devFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forFarmer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract HepaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newHalving\",\"type\":\"uint256[]\"}],\"name\":\"halvingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlock\",\"type\":\"uint256\"}],\"name\":\"lockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGovTokenPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"reclaimTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newMulReward\",\"type\":\"uint256[]\"}],\"name\":\"rewardMulUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"rewardUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newstarblock\",\"type\":\"uint256\"}],\"name\":\"starBlockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"userDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGlobalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDepositBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterHepa.sol\":\"MasterHepa\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n    event AuthorizedAdded(address indexed user);\\n    event AuthorizedRemoved(address indexed user);\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address _toAdd) public onlyOwner {\\n        authorized[_toAdd] = true;\\n        emit AuthorizedAdded(_toAdd);\\n    }\\n\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender);\\n        authorized[_toRemove] = false;\\n        emit AuthorizedRemoved(_toRemove);\\n    }\\n}\\n\",\"keccak256\":\"0xbb665799409219e7076f64c182d032bbe7df63eeace11d518bfd6f3975ac3140\",\"license\":\"MIT\"},\"contracts/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Authorizable.sol\\\";\\n\\n// The GovernanceToken\\ncontract GovernanceToken is ERC20, Ownable, Authorizable {\\n    uint256 private _cap;\\n    uint256 private _totalLock;\\n    uint256 public lockFromBlock;\\n    uint256 public lockToBlock;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _lastUnlockBlock;\\n\\n    event Lock(address indexed to, uint256 value);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 cap_,\\n        uint256 _lockFromBlock,\\n        uint256 _lockToBlock\\n    ) public ERC20(_name, _symbol) {\\n        _cap = cap_;\\n        lockFromBlock = _lockFromBlock;\\n        lockToBlock = _lockToBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    function unlockedSupply() public view returns (uint256) {\\n        return totalSupply().sub(_totalLock);\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return totalLock();\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function totalLock() public view returns (uint256) {\\n        return _totalLock;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // When minting tokens\\n            require(totalSupply().add(amount) <= _cap, \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    function totalBalanceOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder].add(balanceOf(_holder));\\n    }\\n\\n    function lockOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder];\\n    }\\n\\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\\n        return _lastUnlockBlock[_holder];\\n    }\\n\\n    function lock(address _holder, uint256 _amount) public onlyOwner {\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\n        require(_amount <= balanceOf(_holder), \\\"ERC20: lock amount over balance\\\");\\n\\n        _locks[_holder] = _locks[_holder].add(_amount);\\n        _totalLock = _totalLock.add(_amount);\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\n        }\\n\\n        _transfer(_holder, address(this), _amount);\\n\\n        emit Lock(_holder, _amount);\\n    }\\n\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\n        if (block.number < lockFromBlock) {\\n            return 0;\\n        } else if (block.number >= lockToBlock) {\\n            return _locks[_holder];\\n        } else {\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\n            uint256 numberLockBlock = lockToBlock.sub(_lastUnlockBlock[_holder]);\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\n\\n        uint256 amount = canUnlockAmount(msg.sender);\\n\\n        require(amount > 0, \\\"ERC20: Zero amount\\\");\\n\\n        if (amount > balanceOf(address(this))) {\\n            amount = balanceOf(address(this));\\n        }\\n\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\n        _lastUnlockBlock[msg.sender] = block.number;\\n        _totalLock = _totalLock.sub(amount);\\n\\n        _transfer(address(this), msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4fe012abc4421b279c7cf68c082e766d03131ac097d77270445c3676af187224\",\"license\":\"MIT\"},\"contracts/HepaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./GovernanceToken.sol\\\";\\n\\ncontract HepaToken is GovernanceToken {\\n    constructor(\\n        uint256 _cap,\\n        uint256 _lockFromBlock,\\n        uint256 _lockToBlock\\n    ) public GovernanceToken(\\\"HEPA\\\", \\\"HEPA\\\", _cap, _lockFromBlock, _lockToBlock) {}\\n}\\n\",\"keccak256\":\"0xbedce3884c3a7155ba886fbb5c60438e3adc8939ce79e15fb49cbb5769c7a470\",\"license\":\"MIT\"},\"contracts/MasterHepa.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./HepaToken.sol\\\";\\nimport \\\"./Authorizable.sol\\\";\\n\\n// MasterHepa is the master breeder of whatever creature the HepaToken represents.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once HepaToken is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\ncontract MasterHepa is Ownable, Authorizable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtAtBlock; // the last block user stake\\n        uint256 lastWithdrawBlock; // the last block a user withdrew at.\\n        uint256 firstDepositBlock; // the last block a user deposited at.\\n        uint256 lastDepositBlock;\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of HepaTokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accGovTokenPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accGovTokenPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. HepaTokens to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that HepaTokens distribution occurs.\\n        uint256 accGovTokenPerShare; // Accumulated HepaTokens per share, times 1e12. See below.\\n    }\\n\\n    // The Governance token\\n    HepaToken public govToken;\\n    // Dev address.\\n    address public devaddr;\\n    // HepaTokens created per block.\\n    uint256 public REWARD_PER_BLOCK;\\n    // Bonus muliplier for early HepaToken makers.\\n    uint256[] public REWARD_MULTIPLIER; // init in constructor function\\n    uint256[] public HALVING_AT_BLOCK; // init in constructor function\\n    uint256[] public blockDeltaStartStage;\\n    uint256[] public blockDeltaEndStage;\\n    uint256[] public userFeeStage;\\n    uint256[] public devFeeStage;\\n    uint256 public FINISH_BONUS_AT_BLOCK;\\n\\n    // The block number when HepaToken mining starts.\\n    uint256 public START_BLOCK;\\n\\n    uint256 public PERCENT_LOCK_BONUS_REWARD; // lock xx% of bounus reward in 3 year\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens. pid => user address => info\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    mapping(address => uint256) public userGlobalInfo;\\n    mapping(IERC20 => bool) public poolExistence;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SendHepaTokenReward(address indexed user, uint256 indexed pid, uint256 amount, uint256 lockAmount);\\n\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(!poolExistence[_lpToken], \\\"MasterHepa::nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        HepaToken _govToken,\\n        address _devaddr,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _halvingAfterBlock,\\n        uint256[] memory _rewardMultiplier,\\n        uint256[] memory _blockDeltaStartStage,\\n        uint256[] memory _blockDeltaEndStage,\\n        uint256[] memory _userFeeStage,\\n        uint256[] memory _devFeeStage\\n    ) public {\\n        govToken = _govToken;\\n        devaddr = _devaddr;\\n        REWARD_PER_BLOCK = _rewardPerBlock;\\n        START_BLOCK = _startBlock;\\n        REWARD_MULTIPLIER = _rewardMultiplier;\\n        blockDeltaStartStage = _blockDeltaStartStage;\\n        blockDeltaEndStage = _blockDeltaEndStage;\\n        userFeeStage = _userFeeStage;\\n        devFeeStage = _devFeeStage;\\n        for (uint256 i = 0; i < REWARD_MULTIPLIER.length - 1; i++) {\\n            uint256 halvingAtBlock = _halvingAfterBlock.mul(i + 1).add(_startBlock).add(1);\\n            HALVING_AT_BLOCK.push(halvingAtBlock);\\n        }\\n        FINISH_BONUS_AT_BLOCK = _halvingAfterBlock.mul(REWARD_MULTIPLIER.length - 1).add(_startBlock);\\n        HALVING_AT_BLOCK.push(uint256(-1));\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner nonDuplicated(_lpToken) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > START_BLOCK ? block.number : START_BLOCK;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accGovTokenPerShare: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's HepaToken allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 GovTokenForFarmer = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);\\n\\n        govToken.mint(address(this), GovTokenForFarmer);\\n\\n        pool.accGovTokenPerShare = pool.accGovTokenPerShare.add(GovTokenForFarmer.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // |--------------------------------------|\\n    // [20, 30, 40, 50, 60, 70, 80, 99999999]\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        uint256 result;\\n        if (_from < START_BLOCK) return 0;\\n\\n        for (uint256 i = 0; i < HALVING_AT_BLOCK.length; i++) {\\n            uint256 endBlock = HALVING_AT_BLOCK[i];\\n            if (i > REWARD_MULTIPLIER.length.sub(1)) return 0;\\n\\n            if (_to <= endBlock) {\\n                uint256 m = _to.sub(_from).mul(REWARD_MULTIPLIER[i]);\\n                return result.add(m);\\n            }\\n\\n            if (_from < endBlock) {\\n                uint256 m = endBlock.sub(_from).mul(REWARD_MULTIPLIER[i]);\\n                _from = endBlock;\\n                result = result.add(m);\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function getPoolReward(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _allocPoint\\n    ) public view returns (uint256 forFarmer) {\\n        uint256 multiplier = getMultiplier(_from, _to);\\n        uint256 amount = multiplier.mul(REWARD_PER_BLOCK).mul(_allocPoint).div(totalAllocPoint);\\n        uint256 HepaTokenCanMint = govToken.cap().sub(govToken.totalSupply());\\n\\n        if (HepaTokenCanMint < amount) {\\n            forFarmer = HepaTokenCanMint;\\n        } else {\\n            forFarmer = amount;\\n        }\\n    }\\n\\n    // View function to see pending HepaTokens on frontend.\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 accGovTokenPerShare = pool.accGovTokenPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\\n            uint256 GovTokenForFarmer = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);\\n            accGovTokenPerShare = accGovTokenPerShare.add(GovTokenForFarmer.mul(1e12).div(lpSupply));\\n        }\\n\\n        return user.amount.mul(accGovTokenPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function claimRewards(uint256[] memory _pids) public {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            claimReward(_pids[i]);\\n        }\\n    }\\n\\n    function claimReward(uint256 _pid) public {\\n        updatePool(_pid);\\n        _harvest(_pid);\\n    }\\n\\n    // lock 95% of reward\\n    function _harvest(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accGovTokenPerShare).div(1e12).sub(user.rewardDebt);\\n            uint256 masterBal = govToken.balanceOf(address(this));\\n\\n            if (pending > masterBal) {\\n                pending = masterBal;\\n            }\\n\\n            if (pending > 0) {\\n                govToken.transfer(msg.sender, pending);\\n                uint256 lockAmount;\\n                if (user.rewardDebtAtBlock <= FINISH_BONUS_AT_BLOCK) {\\n                    lockAmount = pending.mul(PERCENT_LOCK_BONUS_REWARD).div(100);\\n                    govToken.lock(msg.sender, lockAmount);\\n                }\\n\\n                user.rewardDebtAtBlock = block.number;\\n\\n                emit SendHepaTokenReward(msg.sender, _pid, pending, lockAmount);\\n            }\\n\\n            user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n        }\\n    }\\n\\n    function getGlobalAmount(address _user) public view returns (uint256) {\\n        return userGlobalInfo[_user];\\n    }\\n\\n    // Deposit LP tokens to MasterHepa for HepaToken allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(_amount > 0, \\\"MasterHepa::deposit: amount must be greater than 0\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        userGlobalInfo[msg.sender] = userGlobalInfo[msg.sender].add(_amount);\\n\\n        updatePool(_pid);\\n        _harvest(_pid);\\n\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        if (user.amount == 0) {\\n            user.rewardDebtAtBlock = block.number;\\n        }\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n\\n        if (user.firstDepositBlock == 0) {\\n            user.firstDepositBlock = block.number;\\n        }\\n        user.lastDepositBlock = block.number;\\n    }\\n\\n    // Withdraw LP tokens from MasterHepa.\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"MasterHepa::withdraw: not good\\\");\\n\\n        userGlobalInfo[msg.sender] = userGlobalInfo[msg.sender].sub(_amount);\\n\\n        updatePool(_pid);\\n        _harvest(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            uint256 userBlockDelta = block.number.sub(user.firstDepositBlock);\\n            if (user.lastWithdrawBlock > 0) {\\n                userBlockDelta = block.number.sub(user.lastWithdrawBlock);\\n            }\\n            if (userBlockDelta == blockDeltaStartStage[0] || block.number == user.lastDepositBlock) {\\n                //25% fee for withdrawals of LP tokens in the same block this is to prevent abuse from flashloans\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[0]).div(100));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[0]).div(100));\\n            } else if (userBlockDelta >= blockDeltaStartStage[1] && userBlockDelta <= blockDeltaEndStage[0]) {\\n                //8% fee if a user deposits and withdraws in between same block and 59 minutes.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[1]).div(100));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[1]).div(100));\\n            } else if (userBlockDelta >= blockDeltaStartStage[2] && userBlockDelta <= blockDeltaEndStage[1]) {\\n                //4% fee if a user deposits and withdraws after 1 hour but before 1 day.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[2]).div(100));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[2]).div(100));\\n            } else if (userBlockDelta >= blockDeltaStartStage[3] && userBlockDelta <= blockDeltaEndStage[2]) {\\n                //2% fee if a user deposits and withdraws between after 1 day but before 3 days.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[3]).div(100));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[3]).div(100));\\n            } else if (userBlockDelta >= blockDeltaStartStage[4] && userBlockDelta <= blockDeltaEndStage[3]) {\\n                //1% fee if a user deposits and withdraws after 3 days but before 5 days.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[4]).div(100));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[4]).div(100));\\n            } else if (userBlockDelta >= blockDeltaStartStage[5] && userBlockDelta <= blockDeltaEndStage[4]) {\\n                //0.5% fee if a user deposits and withdraws if the user withdraws after 5 days but before 2 weeks.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[5]).div(1000));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[5]).div(1000));\\n            } else if (userBlockDelta >= blockDeltaStartStage[6] && userBlockDelta <= blockDeltaEndStage[5]) {\\n                //0.25% fee if a user deposits and withdraws after 2 weeks.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[6]).div(10000));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[6]).div(10000));\\n            } else if (userBlockDelta > blockDeltaStartStage[7]) {\\n                //0.1% fee if a user deposits and withdraws after 4 weeks.\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[7]).div(10000));\\n                pool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[7]).div(10000));\\n            }\\n            user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n            emit Withdraw(msg.sender, _pid, _amount);\\n            user.lastWithdrawBlock = block.number;\\n        }\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    // This has the same 25% fee as same block withdrawals to prevent abuse of this function.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        //reordered from Sushi function to prevent risk of reentrancy\\n        uint256 amountToSend = user.amount.mul(75).div(100);\\n        uint256 devToSend = user.amount.mul(25).div(100);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.lpToken.safeTransfer(address(msg.sender), amountToSend);\\n        pool.lpToken.safeTransfer(address(devaddr), devToSend);\\n        emit EmergencyWithdraw(msg.sender, _pid, amountToSend);\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public onlyAuthorized {\\n        require(_devaddr != address(0), \\\"Master Hepa: Zero address\\\");\\n        devaddr = _devaddr;\\n    }\\n\\n    // Update Finish Bonus Block\\n    function bonusFinishUpdate(uint256 _newFinish) public onlyAuthorized {\\n        require(_newFinish > 0, \\\"Master Hepa: Zero finish block\\\");\\n        FINISH_BONUS_AT_BLOCK = _newFinish;\\n    }\\n\\n    // Update Halving At Block\\n    function halvingUpdate(uint256[] memory _newHalving) public onlyAuthorized {\\n        require(_newHalving.length == HALVING_AT_BLOCK.length, \\\"Master Hepa: Halving array mismatch\\\");\\n        HALVING_AT_BLOCK = _newHalving;\\n    }\\n\\n    // Update Reward Per Block\\n    function rewardUpdate(uint256 _newReward) public onlyAuthorized {\\n        require(_newReward > 0, \\\"Master Hepa: Zero reward\\\");\\n        REWARD_PER_BLOCK = _newReward;\\n    }\\n\\n    // Update Rewards Mulitplier Array\\n    function rewardMulUpdate(uint256[] memory _newMulReward) public onlyAuthorized {\\n        require(_newMulReward.length == REWARD_MULTIPLIER.length, \\\"Master Hepa: Multipliers array mismatch\\\");\\n        REWARD_MULTIPLIER = _newMulReward;\\n    }\\n\\n    // Update % lock for general users\\n    function lockUpdate(uint256 _newlock) public onlyAuthorized {\\n        require(_newlock < PERCENT_LOCK_BONUS_REWARD, \\\"Master Hepa: Can only reduce lock value\\\");\\n        PERCENT_LOCK_BONUS_REWARD = _newlock;\\n    }\\n\\n    // Update START_BLOCK\\n    function starBlockUpdate(uint256 _newstarblock) public onlyAuthorized {\\n        require(_newstarblock > 0, \\\"Master Hepa: Zero start block\\\");\\n        START_BLOCK = _newstarblock;\\n    }\\n\\n    // View function to return current reward per block value\\n    // if poolId is zero, then return base emission w/o pool allocation calc\\n    // if poolId is > 0, then return emission with pool allocation calc\\n    // it should use poolId-1 to access poolInfo, as index of array starts from 0\\n    function getNewRewardPerBlock(uint256 poolId) public view returns (uint256) {\\n        uint256 multiplier = getMultiplier(block.number.sub(1), block.number);\\n        if (poolId == 0) {\\n            return multiplier.mul(REWARD_PER_BLOCK);\\n        } else {\\n            return multiplier.mul(REWARD_PER_BLOCK).mul(poolInfo[poolId.sub(1)].allocPoint).div(totalAllocPoint);\\n        }\\n    }\\n\\n    function userDelta(uint256 _pid) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        if (user.lastWithdrawBlock > 0) {\\n            uint256 estDelta = block.number.sub(user.lastWithdrawBlock);\\n            return estDelta;\\n        } else {\\n            uint256 estDelta = block.number.sub(user.firstDepositBlock);\\n            return estDelta;\\n        }\\n    }\\n\\n    function reclaimTokenOwnership(address _newOwner) public onlyAuthorized() {\\n        govToken.transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0d61b9b3c10e34aaaedcf14cb35dc15eac13e881d91ee05504b80ebec9ec295b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035943803806200359483398181016040526101408110156200003857600080fd5b815160208301516040808501516060860151608087015160a0880180519451969895979396929591949293820192846401000000008211156200007a57600080fd5b9083019060208201858111156200009057600080fd5b8251866020820283011164010000000082111715620000ae57600080fd5b82525081516020918201928201910280838360005b83811015620000dd578181015183820152602001620000c3565b50505050905001604052602001805160405193929190846401000000008211156200010757600080fd5b9083019060208201858111156200011d57600080fd5b82518660208202830111640100000000821117156200013b57600080fd5b82525081516020918201928201910280838360005b838110156200016a57818101518382015260200162000150565b50505050905001604052602001805160405193929190846401000000008211156200019457600080fd5b908301906020820185811115620001aa57600080fd5b8251866020820283011164010000000082111715620001c857600080fd5b82525081516020918201928201910280838360005b83811015620001f7578181015183820152602001620001dd565b50505050905001604052602001805160405193929190846401000000008211156200022157600080fd5b9083019060208201858111156200023757600080fd5b82518660208202830111640100000000821117156200025557600080fd5b82525081516020918201928201910280838360005b83811015620002845781810151838201526020016200026a565b5050505090500160405260200180516040519392919084640100000000821115620002ae57600080fd5b908301906020820185811115620002c457600080fd5b8251866020820283011164010000000082111715620002e257600080fd5b82525081516020918201928201910280838360005b8381101562000311578181015183820152602001620002f7565b505050509050016040525050506000620003306200050c60201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600255600380546001600160a01b03808d166001600160a01b03199283161790925560048054928c16929091169190911790556005889055600d8790558451620003ce906006906020880190620005d2565b508351620003e4906008906020870190620005d2565b508251620003fa906009906020860190620005d2565b5081516200041090600a906020850190620005d2565b5080516200042690600b906020840190620005d2565b5060005b60065460001901811015620004a9576000620004776001620004638b62000463866001018d6200051060201b620025791790919060201c565b6200057760201b620025d91790919060201c565b60078054600181810183556000929092526000805160206200355383398151915201919091559190910190506200042a565b50620004d18762000463600160068054905003896200051060201b620025791790919060201c565b600c55505060078054600181018255600091909152600019600080516020620035538339815191529091015550620006399650505050505050565b3390565b600082620005215750600062000571565b828202828482816200052f57fe5b04146200056e5760405162461bcd60e51b8152600401808060200182810382526021815260200180620035736021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156200056e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b82805482825590600052602060002090810192821562000610579160200282015b8281111562000610578251825591602001919060010190620005f3565b506200061e92915062000622565b5090565b5b808211156200061e576000815560010162000623565b612f0a80620006496000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c806364482f7911610167578063b9181611116100ce578063d007db2911610087578063d007db2914610937578063d49e77cd14610954578063d9608d8a1461095c578063e2bbb15814610982578063eda67048146109a5578063f2fde38b146109cb57610295565b8063b91816111461084e578063beff2a5314610888578063c8ed7680146108a5578063cb0b8ca1146108ce578063cbd258b5146108eb578063cf1c316a1461091157610295565b806393f1a40b1161012057806393f1a40b1461078e57806395fdf258146107ed578063975532dc146107f5578063980c2a98146107fd57806398969e8214610805578063ae169a501461083157610295565b806364482f79146106e4578063715018a61461070f5780638d88a90e146107175780638da5cb5b1461073d5780638dbb1e3a14610745578063929c69711461076857610295565b8063354affb71161020b578063485d7d94116101c4578063485d7d94146105bc57806351eb05a6146105e25780635312ea8e146105ff5780635eac62391461061c5780636245f084146106bf578063630b5ba1146106dc57610295565b8063354affb71461041157806339b3e826146104b45780633d479cd5146104bc5780634179b4fb146104d9578063441a3e70146104f6578063466640641461051957610295565b806317caf6f11161025d57806317caf6f11461036157806317e4578e146103695780631d465c82146103865780631eaaa045146103a3578063245b211d146103d75780632fda7735146103f457610295565b806301b689c01461029a57806305268cff146102b9578063081e3eda146102dd57806309ae4d2c146102f75780631526fe2714610314575b600080fd5b6102b7600480360360208110156102b057600080fd5b50356109f1565b005b6102c1610a6c565b604080516001600160a01b039092168252519081900360200190f35b6102e5610a7b565b60408051918252519081900360200190f35b6102e56004803603602081101561030d57600080fd5b5035610a81565b6103316004803603602081101561032a57600080fd5b5035610ae5565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b6102e5610b26565b6102b76004803603602081101561037f57600080fd5b5035610b2c565b6102e56004803603602081101561039c57600080fd5b5035610bbc565b6102b7600480360360608110156103b957600080fd5b508035906001600160a01b0360208201351690604001351515610c44565b6102b7600480360360208110156103ed57600080fd5b5035610e3e565b6102e56004803603602081101561040a57600080fd5b5035610ece565b6102b76004803603602081101561042757600080fd5b81019060208101813564010000000081111561044257600080fd5b82018360208201111561045457600080fd5b8035906020019184602083028401116401000000008311171561047657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610eec945050505050565b6102e5610f7a565b6102b7600480360360208110156104d257600080fd5b5035610f80565b6102e5600480360360208110156104ef57600080fd5b5035611010565b6102b76004803603604081101561050c57600080fd5b508035906020013561101d565b6102b76004803603602081101561052f57600080fd5b81019060208101813564010000000081111561054a57600080fd5b82018360208201111561055c57600080fd5b8035906020019184602083028401116401000000008311171561057e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611642945050505050565b6102b7600480360360208110156105d257600080fd5b50356001600160a01b03166116cc565b6102b7600480360360208110156105f857600080fd5b503561178d565b6102b76004803603602081101561061557600080fd5b5035611906565b6102b76004803603602081101561063257600080fd5b81019060208101813564010000000081111561064d57600080fd5b82018360208201111561065f57600080fd5b8035906020019184602083028401116401000000008311171561068157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a55945050505050565b6102e5600480360360208110156106d557600080fd5b5035611a85565b6102b7611a92565b6102b7600480360360608110156106fa57600080fd5b50803590602081013590604001351515611ab1565b6102b7611b8c565b6102b76004803603602081101561072d57600080fd5b50356001600160a01b0316611c38565b6102c1611ceb565b6102e56004803603604081101561075b57600080fd5b5080359060200135611cfa565b6102e56004803603602081101561077e57600080fd5b50356001600160a01b0316611dfb565b6107ba600480360360408110156107a457600080fd5b50803590602001356001600160a01b0316611e16565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6102e5611e56565b6102e5611e5c565b6102e5611e62565b6102e56004803603604081101561081b57600080fd5b50803590602001356001600160a01b0316611e68565b6102b76004803603602081101561084757600080fd5b5035611fae565b6108746004803603602081101561086457600080fd5b50356001600160a01b0316611fc0565b604080519115158252519081900360200190f35b6102e56004803603602081101561089e57600080fd5b5035611fd5565b6102e5600480360360608110156108bb57600080fd5b5080359060208101359060400135611fe2565b6102e5600480360360208110156108e457600080fd5b503561212a565b6108746004803603602081101561090157600080fd5b50356001600160a01b0316612137565b6102b76004803603602081101561092757600080fd5b50356001600160a01b031661214c565b6102e56004803603602081101561094d57600080fd5b50356121fd565b6102c161220a565b6102e56004803603602081101561097257600080fd5b50356001600160a01b0316612219565b6102b76004803603604081101561099857600080fd5b508035906020013561222b565b6102b7600480360360208110156109bb57600080fd5b50356001600160a01b03166123d8565b6102b7600480360360208110156109e157600080fd5b50356001600160a01b0316612477565b3360009081526001602052604090205460ff1680610a1e575033610a13611ceb565b6001600160a01b0316145b610a2757600080fd5b600e548110610a675760405162461bcd60e51b8152600401808060200182810382526027815260200180612eae6027913960400191505060405180910390fd5b600e55565b6003546001600160a01b031681565b600f5490565b60008181526010602090815260408083203384529091528120600381015415610ac7576000610abd82600301544361263390919063ffffffff16565b9250610ae0915050565b6000610abd82600401544361263390919063ffffffff16565b919050565b600f8181548110610af257fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60135481565b3360009081526001602052604090205460ff1680610b59575033610b4e611ceb565b6001600160a01b0316145b610b6257600080fd5b60008111610bb7576040805162461bcd60e51b815260206004820152601d60248201527f4d617374657220486570613a205a65726f20737461727420626c6f636b000000604482015290519081900360640190fd5b600d55565b600080610bd3610bcd436001612633565b43611cfa565b905082610bf057600554610be8908290612579565b915050610ae0565b601354610be890610c3e600f610c07876001612633565b81548110610c1157fe5b906000526020600020906004020160010154610c386005548661257990919063ffffffff16565b90612579565b90612690565b610c4c6126f7565b6001600160a01b0316610c5d611ceb565b6001600160a01b031614610ca6576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260126020526040902054829060ff1615610d005760405162461bcd60e51b8152600401808060200182810382526025815260200180612e5f6025913960400191505060405180910390fd5b8115610d0e57610d0e611a92565b6000600d544311610d2157600d54610d23565b435b601354909150610d3390866125d9565b6013556001600160a01b0393841660008181526012602090815260408083208054600160ff1990911681179091558151608081018352948552918401988952830193845260608301828152600f8054928301815590925291517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802600490930292830180546001600160a01b031916919097161790955594517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac803860155517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8048501555050517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80590910155565b3360009081526001602052604090205460ff1680610e6b575033610e60611ceb565b6001600160a01b0316145b610e7457600080fd5b60008111610ec9576040805162461bcd60e51b815260206004820152601e60248201527f4d617374657220486570613a205a65726f2066696e69736820626c6f636b0000604482015290519081900360640190fd5b600c55565b60068181548110610edb57fe5b600091825260209091200154905081565b3360009081526001602052604090205460ff1680610f19575033610f0e611ceb565b6001600160a01b0316145b610f2257600080fd5b600754815114610f635760405162461bcd60e51b8152600401808060200182810382526023815260200180612e3c6023913960400191505060405180910390fd5b8051610f76906007906020840190612cf5565b5050565b600d5481565b3360009081526001602052604090205460ff1680610fad575033610fa2611ceb565b6001600160a01b0316145b610fb657600080fd5b6000811161100b576040805162461bcd60e51b815260206004820152601860248201527f4d617374657220486570613a205a65726f207265776172640000000000000000604482015290519081900360640190fd5b600555565b60078181548110610edb57fe5b600280541415611074576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280819055506000600f838154811061108a57fe5b600091825260208083208684526010825260408085203386529092529220805460049092029092019250831115611108576040805162461bcd60e51b815260206004820152601e60248201527f4d6173746572486570613a3a77697468647261773a206e6f7420676f6f640000604482015290519081900360640190fd5b336000908152601160205260409020546111229084612633565b3360009081526011602052604090205561113b8461178d565b611144846126fb565b82156116375780546111569084612633565b8155600481015460009061116b904390612633565b60038301549091501561118b576003820154611188904390612633565b90505b600860008154811061119957fe5b90600052602060002001548114806111b45750816005015443145b1561122d576111ff336111ed6064610c3e600a6000815481106111d357fe5b90600052602060002001548961257990919063ffffffff16565b85546001600160a01b03169190612980565b600454600b8054611228926001600160a01b0316916111ed91606491610c3e916000906111d357fe5b6115d8565b600860018154811061123b57fe5b9060005260206000200154811015801561126d5750600960008154811061125e57fe5b90600052602060002001548111155b156112b75761128c336111ed6064610c3e600a6001815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed91606491610c3e9160019081106111d357fe5b60086002815481106112c557fe5b906000526020600020015481101580156112f7575060096001815481106112e857fe5b90600052602060002001548111155b1561134157611316336111ed6064610c3e600a6002815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed91606491610c3e9160029081106111d357fe5b600860038154811061134f57fe5b906000526020600020015481101580156113815750600960028154811061137257fe5b90600052602060002001548111155b156113cb576113a0336111ed6064610c3e600a6003815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed91606491610c3e9160039081106111d357fe5b60086004815481106113d957fe5b9060005260206000200154811015801561140b575060096003815481106113fc57fe5b90600052602060002001548111155b156114595761142a336111ed6064610c3e600a6004815481106111d357fe5b611228600460009054906101000a90046001600160a01b03166111ed6064610c3e600b6004815481106111d357fe5b600860058154811061146757fe5b906000526020600020015481101580156114995750600960048154811061148a57fe5b90600052602060002001548111155b156114e5576114b9336111ed6103e8610c3e600a6005815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed916103e891610c3e9160059081106111d357fe5b60086006815481106114f357fe5b906000526020600020015481101580156115255750600960058154811061151657fe5b90600052602060002001548111155b1561157157611545336111ed612710610c3e600a6006815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed9161271091610c3e9160069081106111d357fe5b600860078154811061157f57fe5b90600052602060002001548111156115d8576115ac336111ed612710610c3e600a6007815481106111d357fe5b600454600b80546115d8926001600160a01b0316916111ed9161271091610c3e9160079081106111d357fe5b600383015482546115f39164e8d4a5100091610c3e91612579565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3504360038201555b505060016002555050565b3360009081526001602052604090205460ff168061166f575033611664611ceb565b6001600160a01b0316145b61167857600080fd5b6006548151146116b95760405162461bcd60e51b8152600401808060200182810382526027815260200180612d7c6027913960400191505060405180910390fd5b8051610f76906006906020840190612cf5565b6116d46126f7565b6001600160a01b03166116e5611ceb565b6001600160a01b03161461172e576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b03811633141561174457600080fd5b6001600160a01b038116600081815260016020526040808220805460ff19169055517f0fafd0343e6c6f6985727574866da48938c918559eb9521cf9cc0d317ea0f7b49190a250565b6000600f828154811061179c57fe5b90600052602060002090600402019050806002015443116117bd5750611903565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d602081101561183157600080fd5b5051905080611847575043600290910155611903565b600061185c8360020154438560010154611fe2565b600354604080516340c10f1960e01b81523060048201526024810184905290519293506001600160a01b03909116916340c10f199160448082019260009290919082900301818387803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b505050506118f46118e983610c3e64e8d4a510008561257990919063ffffffff16565b6003850154906125d9565b60038401555050436002909101555b50565b60028054141561195d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280819055506000600f828154811061197357fe5b6000918252602080832085845260108252604080852033865290925290832080546004909302909101935091906119b290606490610c3e90604b612579565b905060006119d36064610c3e6019866000015461257990919063ffffffff16565b6000808555600185015584549091506119f6906001600160a01b03163384612980565b6004548454611a12916001600160a01b03918216911683612980565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506001600255505050565b60005b8151811015610f7657611a7d828281518110611a7057fe5b6020026020010151611fae565b600101611a58565b60088181548110610edb57fe5b600f5460005b81811015610f7657611aa98161178d565b600101611a98565b611ab96126f7565b6001600160a01b0316611aca611ceb565b6001600160a01b031614611b13576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b8015611b2157611b21611a92565b611b5e82611b58600f8681548110611b3557fe5b90600052602060002090600402016001015460135461263390919063ffffffff16565b906125d9565b60138190555081600f8481548110611b7257fe5b906000526020600020906004020160010181905550505050565b611b946126f7565b6001600160a01b0316611ba5611ceb565b6001600160a01b031614611bee576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b3360009081526001602052604090205460ff1680611c65575033611c5a611ceb565b6001600160a01b0316145b611c6e57600080fd5b6001600160a01b038116611cc9576040805162461bcd60e51b815260206004820152601960248201527f4d617374657220486570613a205a65726f206164647265737300000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600080600d54841015611d11576000915050611df5565b60005b600754811015611df157600060078281548110611d2d57fe5b600091825260209091200154600654909150611d4a906001612633565b821115611d5d5760009350505050611df5565b808511611da3576000611d8c60068481548110611d7657fe5b600091825260209091200154610c38888a612633565b9050611d9884826125d9565b945050505050611df5565b80861015611de8576000611dd360068481548110611dbd57fe5b600091825260209091200154610c38848a612633565b91965086919050611de484826125d9565b9350505b50600101611d14565b5090505b92915050565b6001600160a01b031660009081526011602052604090205490565b6010602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b600e5481565b60055481565b600c5481565b600080600f8481548110611e7857fe5b600091825260208083208784526010825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b158015611ef657600080fd5b505afa158015611f0a573d6000803e3d6000fd5b505050506040513d6020811015611f2057600080fd5b5051600285015490915043118015611f385750600081115b15611f75576000611f528560020154438760010154611fe2565b9050611f71611f6a83610c3e8464e8d4a51000612579565b84906125d9565b9250505b611fa38360010154611f9d64e8d4a51000610c3e86886000015461257990919063ffffffff16565b90612633565b979650505050505050565b611fb78161178d565b611903816126fb565b60016020526000908152604090205460ff1681565b600b8181548110610edb57fe5b600080611fef8585611cfa565b90506000612012601354610c3e86610c386005548761257990919063ffffffff16565b9050600061210a600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d602081101561209157600080fd5b505160035460408051631aa93a7560e11b815290516001600160a01b039092169163355274ea91600480820192602092909190829003018186803b1580156120d857600080fd5b505afa1580156120ec573d6000803e3d6000fd5b505050506040513d602081101561210257600080fd5b505190612633565b90508181101561211c57809350612120565b8193505b5050509392505050565b60098181548110610edb57fe5b60126020526000908152604090205460ff1681565b6121546126f7565b6001600160a01b0316612165611ceb565b6001600160a01b0316146121ae576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fdd10d14f6ac19e913d4edbb11fd30661531e2ccd0d23f571e9b224f001f0dd069190a250565b600a8181548110610edb57fe5b6004546001600160a01b031681565b60116020526000908152604090205481565b600280541415612282576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055806122c25760405162461bcd60e51b8152600401808060200182810382526032815260200180612dc96032913960400191505060405180910390fd5b6000600f83815481106122d157fe5b6000918252602080832086845260108252604080852033865283528085206011909352909320546004909202909201925061230c90846125d9565b336000908152601160205260409020556123258461178d565b61232e846126fb565b8154612345906001600160a01b03163330866129d2565b8054612352574360028201555b805461235e90846125d9565b808255600383015461237b9164e8d4a5100091610c3e9190612579565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a360048101546123c7574360048201555b436005909101555050600160025550565b3360009081526001602052604090205460ff16806124055750336123fa611ceb565b6001600160a01b0316145b61240e57600080fd5b6003546040805163f2fde38b60e01b81526001600160a01b0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561245c57600080fd5b505af1158015612470573d6000803e3d6000fd5b5050505050565b61247f6126f7565b6001600160a01b0316612490611ceb565b6001600160a01b0316146124d9576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b03811661251e5760405162461bcd60e51b8152600401808060200182810382526026815260200180612d566026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008261258857506000611df5565b8282028284828161259557fe5b04146125d25760405162461bcd60e51b8152600401808060200182810382526021815260200180612dfb6021913960400191505060405180910390fd5b9392505050565b6000828201838110156125d2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008282111561268a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008082116126e6576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816126ef57fe5b049392505050565b3390565b6000600f828154811061270a57fe5b6000918252602080832085845260108252604080852033865290925292208054600490920290920192501561297b5760006127678260010154611f9d64e8d4a51000610c3e8760030154876000015461257990919063ffffffff16565b600354604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156127b857600080fd5b505afa1580156127cc573d6000803e3d6000fd5b505050506040513d60208110156127e257600080fd5b50519050808211156127f2578091505b8115612958576003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561284c57600080fd5b505af1158015612860573d6000803e3d6000fd5b505050506040513d602081101561287657600080fd5b5050600c54600284015460009110612911576128a26064610c3e600e548661257990919063ffffffff16565b6003546040805163282d3fdf60e01b81523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b1580156128f857600080fd5b505af115801561290c573d6000803e3d6000fd5b505050505b43600285015560408051848152602081018390528151889233927fb848bb3f208d3e99f7d61ea4e6e9a7bcb30e7118440e5e45d0cea5d7bfe9606a929081900390910190a3505b600384015483546129739164e8d4a5100091610c3e91612579565b600184015550505b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261297b908490612a32565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612a2c908590612a32565b50505050565b6060612a87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ae39092919063ffffffff16565b80519091501561297b57808060200190516020811015612aa657600080fd5b505161297b5760405162461bcd60e51b815260040180806020018281038252602a815260200180612e84602a913960400191505060405180910390fd5b6060612af28484600085612afa565b949350505050565b606082471015612b3b5760405162461bcd60e51b8152600401808060200182810382526026815260200180612da36026913960400191505060405180910390fd5b612b4485612c4b565b612b95576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612bd45780518252601f199092019160209182019101612bb5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612c36576040519150601f19603f3d011682016040523d82523d6000602084013e612c3b565b606091505b5091509150611fa3828286612c51565b3b151590565b60608315612c605750816125d2565b825115612c705782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612cba578181015183820152602001612ca2565b50505050905090810190601f168015612ce75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215612d30579160200282015b82811115612d30578251825591602001919060010190612d15565b50612d3c929150612d40565b5090565b5b80821115612d3c5760008155600101612d4156fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734d617374657220486570613a204d756c7469706c69657273206172726179206d69736d61746368416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4d6173746572486570613a3a6465706f7369743a20616d6f756e74206d7573742062652067726561746572207468616e2030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724d617374657220486570613a2048616c76696e67206172726179206d69736d617463684d6173746572486570613a3a6e6f6e4475706c6963617465643a206475706c6963617465645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644d617374657220486570613a2043616e206f6e6c7920726564756365206c6f636b2076616c7565a2646970667358221220c5605e8067094eb8d9ed7ce1c15be92e5b283e89a51dee8805b6ba79d229203c64736f6c634300060c0033a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c806364482f7911610167578063b9181611116100ce578063d007db2911610087578063d007db2914610937578063d49e77cd14610954578063d9608d8a1461095c578063e2bbb15814610982578063eda67048146109a5578063f2fde38b146109cb57610295565b8063b91816111461084e578063beff2a5314610888578063c8ed7680146108a5578063cb0b8ca1146108ce578063cbd258b5146108eb578063cf1c316a1461091157610295565b806393f1a40b1161012057806393f1a40b1461078e57806395fdf258146107ed578063975532dc146107f5578063980c2a98146107fd57806398969e8214610805578063ae169a501461083157610295565b806364482f79146106e4578063715018a61461070f5780638d88a90e146107175780638da5cb5b1461073d5780638dbb1e3a14610745578063929c69711461076857610295565b8063354affb71161020b578063485d7d94116101c4578063485d7d94146105bc57806351eb05a6146105e25780635312ea8e146105ff5780635eac62391461061c5780636245f084146106bf578063630b5ba1146106dc57610295565b8063354affb71461041157806339b3e826146104b45780633d479cd5146104bc5780634179b4fb146104d9578063441a3e70146104f6578063466640641461051957610295565b806317caf6f11161025d57806317caf6f11461036157806317e4578e146103695780631d465c82146103865780631eaaa045146103a3578063245b211d146103d75780632fda7735146103f457610295565b806301b689c01461029a57806305268cff146102b9578063081e3eda146102dd57806309ae4d2c146102f75780631526fe2714610314575b600080fd5b6102b7600480360360208110156102b057600080fd5b50356109f1565b005b6102c1610a6c565b604080516001600160a01b039092168252519081900360200190f35b6102e5610a7b565b60408051918252519081900360200190f35b6102e56004803603602081101561030d57600080fd5b5035610a81565b6103316004803603602081101561032a57600080fd5b5035610ae5565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b6102e5610b26565b6102b76004803603602081101561037f57600080fd5b5035610b2c565b6102e56004803603602081101561039c57600080fd5b5035610bbc565b6102b7600480360360608110156103b957600080fd5b508035906001600160a01b0360208201351690604001351515610c44565b6102b7600480360360208110156103ed57600080fd5b5035610e3e565b6102e56004803603602081101561040a57600080fd5b5035610ece565b6102b76004803603602081101561042757600080fd5b81019060208101813564010000000081111561044257600080fd5b82018360208201111561045457600080fd5b8035906020019184602083028401116401000000008311171561047657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610eec945050505050565b6102e5610f7a565b6102b7600480360360208110156104d257600080fd5b5035610f80565b6102e5600480360360208110156104ef57600080fd5b5035611010565b6102b76004803603604081101561050c57600080fd5b508035906020013561101d565b6102b76004803603602081101561052f57600080fd5b81019060208101813564010000000081111561054a57600080fd5b82018360208201111561055c57600080fd5b8035906020019184602083028401116401000000008311171561057e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611642945050505050565b6102b7600480360360208110156105d257600080fd5b50356001600160a01b03166116cc565b6102b7600480360360208110156105f857600080fd5b503561178d565b6102b76004803603602081101561061557600080fd5b5035611906565b6102b76004803603602081101561063257600080fd5b81019060208101813564010000000081111561064d57600080fd5b82018360208201111561065f57600080fd5b8035906020019184602083028401116401000000008311171561068157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a55945050505050565b6102e5600480360360208110156106d557600080fd5b5035611a85565b6102b7611a92565b6102b7600480360360608110156106fa57600080fd5b50803590602081013590604001351515611ab1565b6102b7611b8c565b6102b76004803603602081101561072d57600080fd5b50356001600160a01b0316611c38565b6102c1611ceb565b6102e56004803603604081101561075b57600080fd5b5080359060200135611cfa565b6102e56004803603602081101561077e57600080fd5b50356001600160a01b0316611dfb565b6107ba600480360360408110156107a457600080fd5b50803590602001356001600160a01b0316611e16565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6102e5611e56565b6102e5611e5c565b6102e5611e62565b6102e56004803603604081101561081b57600080fd5b50803590602001356001600160a01b0316611e68565b6102b76004803603602081101561084757600080fd5b5035611fae565b6108746004803603602081101561086457600080fd5b50356001600160a01b0316611fc0565b604080519115158252519081900360200190f35b6102e56004803603602081101561089e57600080fd5b5035611fd5565b6102e5600480360360608110156108bb57600080fd5b5080359060208101359060400135611fe2565b6102e5600480360360208110156108e457600080fd5b503561212a565b6108746004803603602081101561090157600080fd5b50356001600160a01b0316612137565b6102b76004803603602081101561092757600080fd5b50356001600160a01b031661214c565b6102e56004803603602081101561094d57600080fd5b50356121fd565b6102c161220a565b6102e56004803603602081101561097257600080fd5b50356001600160a01b0316612219565b6102b76004803603604081101561099857600080fd5b508035906020013561222b565b6102b7600480360360208110156109bb57600080fd5b50356001600160a01b03166123d8565b6102b7600480360360208110156109e157600080fd5b50356001600160a01b0316612477565b3360009081526001602052604090205460ff1680610a1e575033610a13611ceb565b6001600160a01b0316145b610a2757600080fd5b600e548110610a675760405162461bcd60e51b8152600401808060200182810382526027815260200180612eae6027913960400191505060405180910390fd5b600e55565b6003546001600160a01b031681565b600f5490565b60008181526010602090815260408083203384529091528120600381015415610ac7576000610abd82600301544361263390919063ffffffff16565b9250610ae0915050565b6000610abd82600401544361263390919063ffffffff16565b919050565b600f8181548110610af257fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60135481565b3360009081526001602052604090205460ff1680610b59575033610b4e611ceb565b6001600160a01b0316145b610b6257600080fd5b60008111610bb7576040805162461bcd60e51b815260206004820152601d60248201527f4d617374657220486570613a205a65726f20737461727420626c6f636b000000604482015290519081900360640190fd5b600d55565b600080610bd3610bcd436001612633565b43611cfa565b905082610bf057600554610be8908290612579565b915050610ae0565b601354610be890610c3e600f610c07876001612633565b81548110610c1157fe5b906000526020600020906004020160010154610c386005548661257990919063ffffffff16565b90612579565b90612690565b610c4c6126f7565b6001600160a01b0316610c5d611ceb565b6001600160a01b031614610ca6576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260126020526040902054829060ff1615610d005760405162461bcd60e51b8152600401808060200182810382526025815260200180612e5f6025913960400191505060405180910390fd5b8115610d0e57610d0e611a92565b6000600d544311610d2157600d54610d23565b435b601354909150610d3390866125d9565b6013556001600160a01b0393841660008181526012602090815260408083208054600160ff1990911681179091558151608081018352948552918401988952830193845260608301828152600f8054928301815590925291517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802600490930292830180546001600160a01b031916919097161790955594517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac803860155517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8048501555050517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80590910155565b3360009081526001602052604090205460ff1680610e6b575033610e60611ceb565b6001600160a01b0316145b610e7457600080fd5b60008111610ec9576040805162461bcd60e51b815260206004820152601e60248201527f4d617374657220486570613a205a65726f2066696e69736820626c6f636b0000604482015290519081900360640190fd5b600c55565b60068181548110610edb57fe5b600091825260209091200154905081565b3360009081526001602052604090205460ff1680610f19575033610f0e611ceb565b6001600160a01b0316145b610f2257600080fd5b600754815114610f635760405162461bcd60e51b8152600401808060200182810382526023815260200180612e3c6023913960400191505060405180910390fd5b8051610f76906007906020840190612cf5565b5050565b600d5481565b3360009081526001602052604090205460ff1680610fad575033610fa2611ceb565b6001600160a01b0316145b610fb657600080fd5b6000811161100b576040805162461bcd60e51b815260206004820152601860248201527f4d617374657220486570613a205a65726f207265776172640000000000000000604482015290519081900360640190fd5b600555565b60078181548110610edb57fe5b600280541415611074576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280819055506000600f838154811061108a57fe5b600091825260208083208684526010825260408085203386529092529220805460049092029092019250831115611108576040805162461bcd60e51b815260206004820152601e60248201527f4d6173746572486570613a3a77697468647261773a206e6f7420676f6f640000604482015290519081900360640190fd5b336000908152601160205260409020546111229084612633565b3360009081526011602052604090205561113b8461178d565b611144846126fb565b82156116375780546111569084612633565b8155600481015460009061116b904390612633565b60038301549091501561118b576003820154611188904390612633565b90505b600860008154811061119957fe5b90600052602060002001548114806111b45750816005015443145b1561122d576111ff336111ed6064610c3e600a6000815481106111d357fe5b90600052602060002001548961257990919063ffffffff16565b85546001600160a01b03169190612980565b600454600b8054611228926001600160a01b0316916111ed91606491610c3e916000906111d357fe5b6115d8565b600860018154811061123b57fe5b9060005260206000200154811015801561126d5750600960008154811061125e57fe5b90600052602060002001548111155b156112b75761128c336111ed6064610c3e600a6001815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed91606491610c3e9160019081106111d357fe5b60086002815481106112c557fe5b906000526020600020015481101580156112f7575060096001815481106112e857fe5b90600052602060002001548111155b1561134157611316336111ed6064610c3e600a6002815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed91606491610c3e9160029081106111d357fe5b600860038154811061134f57fe5b906000526020600020015481101580156113815750600960028154811061137257fe5b90600052602060002001548111155b156113cb576113a0336111ed6064610c3e600a6003815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed91606491610c3e9160039081106111d357fe5b60086004815481106113d957fe5b9060005260206000200154811015801561140b575060096003815481106113fc57fe5b90600052602060002001548111155b156114595761142a336111ed6064610c3e600a6004815481106111d357fe5b611228600460009054906101000a90046001600160a01b03166111ed6064610c3e600b6004815481106111d357fe5b600860058154811061146757fe5b906000526020600020015481101580156114995750600960048154811061148a57fe5b90600052602060002001548111155b156114e5576114b9336111ed6103e8610c3e600a6005815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed916103e891610c3e9160059081106111d357fe5b60086006815481106114f357fe5b906000526020600020015481101580156115255750600960058154811061151657fe5b90600052602060002001548111155b1561157157611545336111ed612710610c3e600a6006815481106111d357fe5b600454600b8054611228926001600160a01b0316916111ed9161271091610c3e9160069081106111d357fe5b600860078154811061157f57fe5b90600052602060002001548111156115d8576115ac336111ed612710610c3e600a6007815481106111d357fe5b600454600b80546115d8926001600160a01b0316916111ed9161271091610c3e9160079081106111d357fe5b600383015482546115f39164e8d4a5100091610c3e91612579565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3504360038201555b505060016002555050565b3360009081526001602052604090205460ff168061166f575033611664611ceb565b6001600160a01b0316145b61167857600080fd5b6006548151146116b95760405162461bcd60e51b8152600401808060200182810382526027815260200180612d7c6027913960400191505060405180910390fd5b8051610f76906006906020840190612cf5565b6116d46126f7565b6001600160a01b03166116e5611ceb565b6001600160a01b03161461172e576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b03811633141561174457600080fd5b6001600160a01b038116600081815260016020526040808220805460ff19169055517f0fafd0343e6c6f6985727574866da48938c918559eb9521cf9cc0d317ea0f7b49190a250565b6000600f828154811061179c57fe5b90600052602060002090600402019050806002015443116117bd5750611903565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d602081101561183157600080fd5b5051905080611847575043600290910155611903565b600061185c8360020154438560010154611fe2565b600354604080516340c10f1960e01b81523060048201526024810184905290519293506001600160a01b03909116916340c10f199160448082019260009290919082900301818387803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b505050506118f46118e983610c3e64e8d4a510008561257990919063ffffffff16565b6003850154906125d9565b60038401555050436002909101555b50565b60028054141561195d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280819055506000600f828154811061197357fe5b6000918252602080832085845260108252604080852033865290925290832080546004909302909101935091906119b290606490610c3e90604b612579565b905060006119d36064610c3e6019866000015461257990919063ffffffff16565b6000808555600185015584549091506119f6906001600160a01b03163384612980565b6004548454611a12916001600160a01b03918216911683612980565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506001600255505050565b60005b8151811015610f7657611a7d828281518110611a7057fe5b6020026020010151611fae565b600101611a58565b60088181548110610edb57fe5b600f5460005b81811015610f7657611aa98161178d565b600101611a98565b611ab96126f7565b6001600160a01b0316611aca611ceb565b6001600160a01b031614611b13576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b8015611b2157611b21611a92565b611b5e82611b58600f8681548110611b3557fe5b90600052602060002090600402016001015460135461263390919063ffffffff16565b906125d9565b60138190555081600f8481548110611b7257fe5b906000526020600020906004020160010181905550505050565b611b946126f7565b6001600160a01b0316611ba5611ceb565b6001600160a01b031614611bee576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b3360009081526001602052604090205460ff1680611c65575033611c5a611ceb565b6001600160a01b0316145b611c6e57600080fd5b6001600160a01b038116611cc9576040805162461bcd60e51b815260206004820152601960248201527f4d617374657220486570613a205a65726f206164647265737300000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600080600d54841015611d11576000915050611df5565b60005b600754811015611df157600060078281548110611d2d57fe5b600091825260209091200154600654909150611d4a906001612633565b821115611d5d5760009350505050611df5565b808511611da3576000611d8c60068481548110611d7657fe5b600091825260209091200154610c38888a612633565b9050611d9884826125d9565b945050505050611df5565b80861015611de8576000611dd360068481548110611dbd57fe5b600091825260209091200154610c38848a612633565b91965086919050611de484826125d9565b9350505b50600101611d14565b5090505b92915050565b6001600160a01b031660009081526011602052604090205490565b6010602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b600e5481565b60055481565b600c5481565b600080600f8481548110611e7857fe5b600091825260208083208784526010825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b158015611ef657600080fd5b505afa158015611f0a573d6000803e3d6000fd5b505050506040513d6020811015611f2057600080fd5b5051600285015490915043118015611f385750600081115b15611f75576000611f528560020154438760010154611fe2565b9050611f71611f6a83610c3e8464e8d4a51000612579565b84906125d9565b9250505b611fa38360010154611f9d64e8d4a51000610c3e86886000015461257990919063ffffffff16565b90612633565b979650505050505050565b611fb78161178d565b611903816126fb565b60016020526000908152604090205460ff1681565b600b8181548110610edb57fe5b600080611fef8585611cfa565b90506000612012601354610c3e86610c386005548761257990919063ffffffff16565b9050600061210a600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d602081101561209157600080fd5b505160035460408051631aa93a7560e11b815290516001600160a01b039092169163355274ea91600480820192602092909190829003018186803b1580156120d857600080fd5b505afa1580156120ec573d6000803e3d6000fd5b505050506040513d602081101561210257600080fd5b505190612633565b90508181101561211c57809350612120565b8193505b5050509392505050565b60098181548110610edb57fe5b60126020526000908152604090205460ff1681565b6121546126f7565b6001600160a01b0316612165611ceb565b6001600160a01b0316146121ae576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fdd10d14f6ac19e913d4edbb11fd30661531e2ccd0d23f571e9b224f001f0dd069190a250565b600a8181548110610edb57fe5b6004546001600160a01b031681565b60116020526000908152604090205481565b600280541415612282576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055806122c25760405162461bcd60e51b8152600401808060200182810382526032815260200180612dc96032913960400191505060405180910390fd5b6000600f83815481106122d157fe5b6000918252602080832086845260108252604080852033865283528085206011909352909320546004909202909201925061230c90846125d9565b336000908152601160205260409020556123258461178d565b61232e846126fb565b8154612345906001600160a01b03163330866129d2565b8054612352574360028201555b805461235e90846125d9565b808255600383015461237b9164e8d4a5100091610c3e9190612579565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a360048101546123c7574360048201555b436005909101555050600160025550565b3360009081526001602052604090205460ff16806124055750336123fa611ceb565b6001600160a01b0316145b61240e57600080fd5b6003546040805163f2fde38b60e01b81526001600160a01b0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561245c57600080fd5b505af1158015612470573d6000803e3d6000fd5b5050505050565b61247f6126f7565b6001600160a01b0316612490611ceb565b6001600160a01b0316146124d9576040805162461bcd60e51b81526020600482018190526024820152600080516020612e1c833981519152604482015290519081900360640190fd5b6001600160a01b03811661251e5760405162461bcd60e51b8152600401808060200182810382526026815260200180612d566026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008261258857506000611df5565b8282028284828161259557fe5b04146125d25760405162461bcd60e51b8152600401808060200182810382526021815260200180612dfb6021913960400191505060405180910390fd5b9392505050565b6000828201838110156125d2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008282111561268a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008082116126e6576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816126ef57fe5b049392505050565b3390565b6000600f828154811061270a57fe5b6000918252602080832085845260108252604080852033865290925292208054600490920290920192501561297b5760006127678260010154611f9d64e8d4a51000610c3e8760030154876000015461257990919063ffffffff16565b600354604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156127b857600080fd5b505afa1580156127cc573d6000803e3d6000fd5b505050506040513d60208110156127e257600080fd5b50519050808211156127f2578091505b8115612958576003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561284c57600080fd5b505af1158015612860573d6000803e3d6000fd5b505050506040513d602081101561287657600080fd5b5050600c54600284015460009110612911576128a26064610c3e600e548661257990919063ffffffff16565b6003546040805163282d3fdf60e01b81523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b1580156128f857600080fd5b505af115801561290c573d6000803e3d6000fd5b505050505b43600285015560408051848152602081018390528151889233927fb848bb3f208d3e99f7d61ea4e6e9a7bcb30e7118440e5e45d0cea5d7bfe9606a929081900390910190a3505b600384015483546129739164e8d4a5100091610c3e91612579565b600184015550505b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261297b908490612a32565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612a2c908590612a32565b50505050565b6060612a87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ae39092919063ffffffff16565b80519091501561297b57808060200190516020811015612aa657600080fd5b505161297b5760405162461bcd60e51b815260040180806020018281038252602a815260200180612e84602a913960400191505060405180910390fd5b6060612af28484600085612afa565b949350505050565b606082471015612b3b5760405162461bcd60e51b8152600401808060200182810382526026815260200180612da36026913960400191505060405180910390fd5b612b4485612c4b565b612b95576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612bd45780518252601f199092019160209182019101612bb5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612c36576040519150601f19603f3d011682016040523d82523d6000602084013e612c3b565b606091505b5091509150611fa3828286612c51565b3b151590565b60608315612c605750816125d2565b825115612c705782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612cba578181015183820152602001612ca2565b50505050905090810190601f168015612ce75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215612d30579160200282015b82811115612d30578251825591602001919060010190612d15565b50612d3c929150612d40565b5090565b5b80821115612d3c5760008155600101612d4156fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734d617374657220486570613a204d756c7469706c69657273206172726179206d69736d61746368416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4d6173746572486570613a3a6465706f7369743a20616d6f756e74206d7573742062652067726561746572207468616e2030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724d617374657220486570613a2048616c76696e67206172726179206d69736d617463684d6173746572486570613a3a6e6f6e4475706c6963617465643a206475706c6963617465645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644d617374657220486570613a2043616e206f6e6c7920726564756365206c6f636b2076616c7565a2646970667358221220c5605e8067094eb8d9ed7ce1c15be92e5b283e89a51dee8805b6ba79d229203c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2118,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "authorized",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2080,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2678,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "govToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(HepaToken)2632"
      },
      {
        "astId": 2680,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "devaddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2682,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "REWARD_PER_BLOCK",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2685,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "REWARD_MULTIPLIER",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2688,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "HALVING_AT_BLOCK",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2691,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "blockDeltaStartStage",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2694,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "blockDeltaEndStage",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2697,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "userFeeStage",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2700,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "devFeeStage",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2702,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "FINISH_BONUS_AT_BLOCK",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2704,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "START_BLOCK",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2706,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "PERCENT_LOCK_BONUS_REWARD",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2709,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "poolInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(PoolInfo)2676_storage)dyn_storage"
      },
      {
        "astId": 2715,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "userInfo",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2667_storage))"
      },
      {
        "astId": 2719,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "userGlobalInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2723,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "poolExistence",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_contract(IERC20)1045,t_bool)"
      },
      {
        "astId": 2725,
        "contract": "contracts/MasterHepa.sol:MasterHepa",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)2676_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)2676_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterHepa.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HepaToken)2632": {
        "encoding": "inplace",
        "label": "contract HepaToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)2667_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterHepa.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2667_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1045,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1045",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2667_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterHepa.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2667_storage)"
      },
      "t_struct(PoolInfo)2676_storage": {
        "encoding": "inplace",
        "label": "struct MasterHepa.PoolInfo",
        "members": [
          {
            "astId": 2669,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1045"
          },
          {
            "astId": 2671,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2673,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2675,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "accGovTokenPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)2667_storage": {
        "encoding": "inplace",
        "label": "struct MasterHepa.UserInfo",
        "members": [
          {
            "astId": 2656,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2658,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2660,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "rewardDebtAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2662,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "lastWithdrawBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2664,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "firstDepositBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2666,
            "contract": "contracts/MasterHepa.sol:MasterHepa",
            "label": "lastDepositBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
