{
  "address": "0xC7Ca29d9ae3ddeD2eceCee12F17CCD144c84ef63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DuelToken",
          "name": "_DUEL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositEndBlock",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocationPoints",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LeftoverClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DUEL",
      "outputs": [
        {
          "internalType": "contract DuelToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLASHING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_alloc",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLeftovers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winnerPid",
          "type": "uint256"
        },
        {
          "internalType": "enum DuelEvent.EventResultStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setCancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setClaimingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setDepositEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_alloc",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTokenPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "setWin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x12b909b598f13b225cff7a5f1225c913ca5eb73ffe7cd693ba989170d6abbc67",
  "receipt": {
    "to": null,
    "from": "0xE293014dC435f2263088cF726a32E537941F96Fa",
    "contractAddress": "0xC7Ca29d9ae3ddeD2eceCee12F17CCD144c84ef63",
    "transactionIndex": 2,
    "gasUsed": "3068490",
    "logsBloom": "0x
    "blockHash": "0xa3c56c7d93eaafe50226290af7d21c9d550f0ae5d0879c96329ed01a463c3d7c",
    "transactionHash": "0x12b909b598f13b225cff7a5f1225c913ca5eb73ffe7cd693ba989170d6abbc67",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 11862831,
        "transactionHash": "0x12b909b598f13b225cff7a5f1225c913ca5eb73ffe7cd693ba989170d6abbc67",
        "address": "0xC7Ca29d9ae3ddeD2eceCee12F17CCD144c84ef63",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e293014dc435f2263088cf726a32e537941f96fa"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xa3c56c7d93eaafe50226290af7d21c9d550f0ae5d0879c96329ed01a463c3d7c"
      }
    ],
    "blockNumber": 11862831,
    "cumulativeGasUsed": "3494774",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6ee9b76A9cDd69190b5Aad2B2F3B3fCB3471228e",
    "0xE293014dC435f2263088cF726a32E537941F96Fa",
    11864859,
    11926059,
    11897259,
    "0x69BAa471326c31f846ddE16505F2BD9442FD105c",
    [
      100,
      100
    ]
  ],
  "solcInputHash": "540f8ab2b5d97fb97a23aec013e3aacb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DuelToken\",\"name\":\"_DUEL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocationPoints\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LeftoverClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DUEL\",\"outputs\":[{\"internalType\":\"contract DuelToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLASHING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLeftovers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winnerPid\",\"type\":\"uint256\"},{\"internalType\":\"enum DuelEvent.EventResultStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setClaimingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setDepositEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address,uint256,bool)\":{\"details\":\"Adds a new pool, only owner.\"},\"claimLeftovers()\":{\"details\":\"Sends leftover tokens to the fee recipient, only owner.\"},\"deposit(uint256,uint256)\":{\"details\":\"Deposit LP tokens to the pool for reward token allocation.\"},\"emergencyWithdraw(uint256)\":{\"details\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"exit(uint256)\":{\"details\":\"Exit pool and claim rewards\"},\"getBaseRewardPerBlock()\":{\"details\":\"Returns base reward per block.\"},\"getMultiplier(uint256,uint256)\":{\"details\":\"Returns reward multiplier over the given _from to _to block.\"},\"getPoolRewardPerBlock(uint256)\":{\"details\":\"Returns the pool specific reward per block.\"},\"massUpdatePools()\":{\"details\":\"Updates reward vairables for all pools. Be careful of gas spending!\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRewards(uint256,address)\":{\"details\":\"Returns pending rewards for user.\"},\"poolLength()\":{\"details\":\"Returns the poolInfo length.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCancel()\":{\"details\":\"Sets event status to EventResultStatus.Cancel. Only owner.\"},\"setClaimingFee(uint256)\":{\"details\":\"Updates claming fee, max is 1%, only owner.\"},\"setDepositEndBlock(uint256)\":{\"details\":\"Updates deposit end block, only owner.\"},\"setDraw()\":{\"details\":\"Sets event status to EventResultStatus.Draw. Only owner.\"},\"setEndBlock(uint256)\":{\"details\":\"Updates end block, only owner.\"},\"setFeeRecipient(address)\":{\"details\":\"Updates fee recipient, only owner.\"},\"setPool(uint256,uint256,bool)\":{\"details\":\"Updates pool allocation points, only owner.\"},\"setStartBlock(uint256)\":{\"details\":\"Updates start block, only owner.\"},\"setTokenPerBlock(uint256)\":{\"details\":\"Updates reward per block, only owner.\"},\"setWin(uint256)\":{\"details\":\"Sets event status to EventResultStatus.Win and selects winner pool. Only owner.\"},\"setWithdrawalFee(uint256)\":{\"details\":\"Updates withdrawal fee, max is 10%, only owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"details\":\"Updates reward vairables for the pool.\"},\"withdraw(uint256,uint256)\":{\"details\":\"Withdraw LP tokens from the pool.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DuelEvent.sol\":\"DuelEvent\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/DuelEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./DuelToken.sol\\\";\\n\\ncontract DuelEvent is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 pendingReward; // Pending rewards\\n        bool claimed;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 supply; // LP supply for this pool\\n        uint256 allocPoint; // How many allocation points assigned to this pool. DUELs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that DUELs distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated DUELs per share, times 1e12. See below.\\n        uint256 totalRewards; // Total rewards for the pool\\n    }\\n\\n    // Basis point base to calculate fees\\n    uint256 public constant FEE_BASE = 10000;\\n\\n    // 25% slashing fee, used in emergency withdrawals\\n    uint256 public constant SLASHING_FEE = 2500;\\n\\n    // 0.25% claming fee, can be adjusted by the owner (fee <= 100, fee <= 1%)\\n    uint256 public claimingFee = 25;\\n\\n    // 4% early withdrawal fee, can be adjusted by the owner (fee <= 1000, fee <= 10%)\\n    // disabled if winner pool has been selected\\n    uint256 public withdrawalFee = 400;\\n\\n    // Address where all fees goes, can be adjusted by the owner\\n    address public feeRecipient;\\n\\n    // Reward token instnace\\n    DuelToken public DUEL;\\n\\n    // Reward token per block, can be adjusted by the owner\\n    uint256 public tokenPerBlock = 1e18;\\n\\n    // The block number when rewards starts.\\n    uint256 public startBlock;\\n\\n    // The block number when rewards ends.\\n    uint256 public endBlock;\\n\\n    // The block number until deposits are possible\\n    uint256 public depositEndBlock;\\n\\n    // Event Result status enum\\n    enum EventResultStatus {\\n        Active,\\n        Win,\\n        Draw,\\n        Cancel\\n    }\\n\\n    // Event result struct\\n    struct EventResult {\\n        uint256 winnerPid;\\n        EventResultStatus status;\\n    }\\n\\n    // Event result to check the status of the event\\n    EventResult public eventResult;\\n\\n    // Pools array\\n    PoolInfo[] public poolInfo;\\n\\n    // Users mapping, poolId => userAddress => UserInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Exit(address indexed user, uint256 indexed pid);\\n    event LeftoverClaim(address indexed user, uint256 amount);\\n\\n    constructor(\\n        DuelToken _DUEL,\\n        address _feeAddress,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _depositEndBlock,\\n        IERC20 _lpToken,\\n        uint256[] memory _allocationPoints\\n    ) public {\\n        DUEL = _DUEL;\\n        feeRecipient = _feeAddress;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        depositEndBlock = _depositEndBlock;\\n\\n        for (uint256 i = 0; i < _allocationPoints.length; i++) {\\n            addPool(_lpToken, _allocationPoints[i], false);\\n        }\\n\\n        eventResult.status = EventResultStatus.Active;\\n    }\\n\\n    /**\\n     * @dev Updates reward vairables for all pools. Be careful of gas spending!\\n     */\\n    function massUpdatePools() public {\\n        for (uint256 pid = 0; pid < poolInfo.length; pid++) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates reward vairables for the pool.\\n     */\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.number <= pool.lastRewardBlock || block.number < startBlock || pool.lastRewardBlock >= endBlock) {\\n            //pool.accTokenPerShare = 0;\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.supply;\\n\\n        if (lpSupply <= 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, toBlock);\\n        uint256 reward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(reward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = toBlock;\\n        pool.totalRewards = pool.totalRewards.add(reward);\\n\\n        DUEL.mint(address(this), reward);\\n    }\\n\\n    /**\\n     * @dev Deposit LP tokens to the pool for reward token allocation.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        require(block.number < depositEndBlock, \\\"DuelEvent: Deposit deadline\\\");\\n        require(_amount > 0, \\\"DuelEvent: Zero amount\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        updatePool(_pid);\\n\\n        if (user.amount > 0) {\\n            user.pendingReward = user.pendingReward.add(user.amount.mul(pool.accTokenPerShare).div(1e12));\\n        }\\n\\n        user.amount = user.amount.add(_amount);\\n        pool.supply = pool.supply.add(_amount);\\n\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw LP tokens from the pool.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"DuelEvent: Zero amount\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"DuelEvent: Withdrawal amount exceed balance\\\");\\n\\n        updatePool(_pid);\\n\\n        user.pendingReward = user.pendingReward.add(user.amount.mul(pool.accTokenPerShare).div(1e12));\\n\\n        uint256 fee = getWithdrawalFee(_pid);\\n\\n        uint256 amount = applyFee(fee, _amount);\\n        uint256 feeAmount = calculateFee(fee, _amount);\\n\\n        user.amount = user.amount.sub(_amount);\\n        pool.supply = pool.supply.sub(_amount);\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        if (feeAmount > 0) {\\n            pool.lpToken.safeTransfer(address(feeRecipient), feeAmount);\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\n     */\\n    function emergencyWithdraw(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        pool.supply = pool.supply.sub(user.amount);\\n\\n        uint256 amount = applyFee(SLASHING_FEE, user.amount);\\n        uint256 feeAmount = calculateFee(SLASHING_FEE, user.amount);\\n\\n        user.amount = 0;\\n        user.pendingReward = 0;\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        pool.lpToken.safeTransfer(address(feeRecipient), feeAmount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /**\\n     * @dev Exit pool and claim rewards\\n     */\\n    function exit(uint256 _pid) external nonReentrant {\\n        require(eventResult.status != EventResultStatus.Active, \\\"DuelEvent: Event has not been concluded\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(!user.claimed, \\\"DuelEvent: Claimed already\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 userReward = pendingRewards(_pid, msg.sender);\\n\\n        if (user.amount > 0) {\\n            uint256 fee = getWithdrawalFee(_pid);\\n\\n            uint256 amount = applyFee(fee, user.amount);\\n            uint256 feeAmount = calculateFee(fee, user.amount);\\n\\n            user.amount = 0;\\n            pool.supply = pool.supply.sub(user.amount);\\n\\n            pool.lpToken.safeTransfer(address(msg.sender), amount);\\n\\n            if (feeAmount > 0) {\\n                pool.lpToken.safeTransfer(address(feeRecipient), feeAmount);\\n            }\\n\\n            emit Withdraw(msg.sender, _pid, amount);\\n        }\\n\\n        user.claimed = true;\\n\\n        if (userReward > 0) {\\n            safeTokenTransfer(msg.sender, userReward);\\n            emit Claim(msg.sender, _pid, userReward);\\n        }\\n\\n        emit Exit(msg.sender, _pid);\\n    }\\n\\n    /**\\n     * @dev Returns reward multiplier over the given _from to _to block.\\n     */\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    /**\\n     * @dev Returns pending rewards for user.\\n     */\\n    function pendingRewards(uint256 _pid, address _user) public view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        if (block.number < startBlock || user.claimed) {\\n            return 0;\\n        }\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = pool.supply;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, toBlock);\\n            uint256 reward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accTokenPerShare = accTokenPerShare.add(reward.mul(1e12).div(lpSupply));\\n        }\\n        uint256 userReward = user.amount.mul(accTokenPerShare).div(1e12).add(user.pendingReward);\\n\\n        if (eventResult.status == EventResultStatus.Win && eventResult.winnerPid == _pid) {\\n            uint256 userShare = userReward.mul(1e12).div(pool.totalRewards);\\n            for (uint256 pid = 0; pid < poolInfo.length; pid++) {\\n                if (pid != eventResult.winnerPid) {\\n                    PoolInfo memory _pool = poolInfo[pid];\\n                    userReward = userReward.add(userShare.mul(_pool.totalRewards).div(1e12));\\n                }\\n            }\\n        } else if (\\n            (eventResult.status == EventResultStatus.Win && eventResult.winnerPid != _pid) ||\\n            eventResult.status == EventResultStatus.Cancel\\n        ) {\\n            userReward = 0;\\n        }\\n\\n        return userReward;\\n    }\\n\\n    /**\\n     * @dev Returns the poolInfo length.\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @dev Returns base reward per block.\\n     */\\n    function getBaseRewardPerBlock() external view returns (uint256) {\\n        return tokenPerBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the pool specific reward per block.\\n     */\\n    function getPoolRewardPerBlock(uint256 _pid) external view returns (uint256) {\\n        return tokenPerBlock.mul(poolInfo[_pid].allocPoint).div(totalAllocPoint);\\n    }\\n\\n    /**\\n     * @dev Sets event status to EventResultStatus.Win and selects winner pool. Only owner.\\n     */\\n    function setWin(uint256 _pid) public onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        massUpdatePools();\\n        eventResult.status = EventResultStatus.Win;\\n        eventResult.winnerPid = _pid;\\n    }\\n\\n    /**\\n     * @dev Sets event status to EventResultStatus.Draw. Only owner.\\n     */\\n    function setDraw() public onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        massUpdatePools();\\n        eventResult.status = EventResultStatus.Draw;\\n    }\\n\\n    /**\\n     * @dev Sets event status to EventResultStatus.Cancel. Only owner.\\n     */\\n    function setCancel() public onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        massUpdatePools();\\n        eventResult.status = EventResultStatus.Cancel;\\n    }\\n\\n    /**\\n     * @dev Adds a new pool, only owner.\\n     */\\n    function addPool(\\n        IERC20 _lp,\\n        uint256 _alloc,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.add(_alloc);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lp,\\n                supply: 0,\\n                allocPoint: _alloc,\\n                lastRewardBlock: block.number > startBlock ? block.number : startBlock,\\n                accTokenPerShare: 0,\\n                totalRewards: 0\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates pool allocation points, only owner.\\n     */\\n    function setPool(\\n        uint256 _pid,\\n        uint256 _alloc,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_alloc);\\n        poolInfo[_pid].allocPoint = _alloc;\\n    }\\n\\n    /**\\n     * @dev Sends leftover tokens to the fee recipient, only owner.\\n     */\\n    function claimLeftovers() external onlyOwner {\\n        require(eventResult.status != EventResultStatus.Active, \\\"DuelEvent: Event has not been concluded\\\");\\n        require(poolInfo[0].lpToken.balanceOf(address(this)) == 0, \\\"DuelEvent: Not all users has claimed\\\");\\n\\n        uint256 balance = DUEL.balanceOf(address(this));\\n        require(balance > 0, \\\"DuelEvent: Zero balance\\\");\\n\\n        safeTokenTransfer(feeRecipient, balance);\\n        emit LeftoverClaim(feeRecipient, balance);\\n    }\\n\\n    /**\\n     * @dev Updates claming fee, max is 1%, only owner.\\n     */\\n    function setClaimingFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= 100, \\\"DuelEvent: Max claming fee\\\");\\n        claimingFee = _fee;\\n    }\\n\\n    /**\\n     * @dev Updates withdrawal fee, max is 10%, only owner.\\n     */\\n    function setWithdrawalFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= 1000, \\\"DuelEvent: Max withdrawal fee\\\");\\n        withdrawalFee = _fee;\\n    }\\n\\n    /**\\n     * @dev Updates fee recipient, only owner.\\n     */\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"DuelEvent: Zero fee recipient\\\");\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /**\\n     * @dev Updates reward per block, only owner.\\n     */\\n    function setTokenPerBlock(uint256 _amount) external onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        require(_amount <= 30 * 1e18, \\\"DuelEvent: Max per block\\\");\\n        require(_amount >= 1 * 1e18, \\\"DuelEvent: Min per block\\\");\\n        tokenPerBlock = _amount;\\n    }\\n\\n    /**\\n     * @dev Updates start block, only owner.\\n     */\\n    function setStartBlock(uint256 _block) external onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        require(startBlock > block.number, \\\"DuelEvent: Event has been started\\\");\\n        require(_block < endBlock, \\\"DuelEvent: Start block should be less then endBlock\\\");\\n\\n        startBlock = _block;\\n\\n        for (uint256 pid = 0; pid < poolInfo.length; pid++) {\\n            poolInfo[pid].lastRewardBlock = startBlock;\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates end block, only owner.\\n     */\\n    function setEndBlock(uint256 _block) external onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        require(endBlock > block.number, \\\"DuelEvent: Event has been finished\\\");\\n        require(_block > startBlock, \\\"DuelEvent: End block should be greater then startBlock\\\");\\n\\n        endBlock = _block;\\n    }\\n\\n    /**\\n     * @dev Updates deposit end block, only owner.\\n     */\\n    function setDepositEndBlock(uint256 _block) external onlyOwner {\\n        require(eventResult.status == EventResultStatus.Active, \\\"DuelEvent: Event has been concluded\\\");\\n        require(_block > startBlock && _block < endBlock, \\\"DuelEvent: Wrong deposit end block\\\");\\n\\n        depositEndBlock = _block;\\n    }\\n\\n    /**\\n     * @dev Safe token transfer function, just in case if rounding error\\n     * causes pool to not have enough token balance.\\n     */\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 balance = DUEL.balanceOf(address(this));\\n        uint256 amount = _amount > balance ? balance : _amount;\\n        require(DUEL.transfer(_to, amount), \\\"DuelEvent: safeTokenTransfer error\\\");\\n    }\\n\\n    /**\\n     * @dev it calculates (1 - fee) * amount\\n     * Applies the fee by subtracting fees from the amount and returns\\n     * the amount after deducting the fee.\\n     */\\n    function applyFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\\n        return _amount.mul(FEE_BASE.sub(_feeInBips)).div(FEE_BASE);\\n    }\\n\\n    /**\\n     * @dev it calculates fee * amount\\n     * Calculates the fee amount.\\n     */\\n    function calculateFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\\n        return _amount.mul(_feeInBips).div(FEE_BASE);\\n    }\\n\\n    /**\\n     * @dev Get withdrawal fee in basis points for the user of the given pool.\\n     */\\n    function getWithdrawalFee(uint256 _pid) internal view returns (uint256) {\\n        if (eventResult.status != EventResultStatus.Active) {\\n            if (\\n                (eventResult.status == EventResultStatus.Win && _pid == eventResult.winnerPid) ||\\n                eventResult.status == EventResultStatus.Draw\\n            ) {\\n                return claimingFee;\\n            } else {\\n                return 0;\\n            }\\n        } else {\\n            return withdrawalFee;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63159b67e746179527141f1927b303085ae40e0c85fad42dd22b9ba54724d74f\",\"license\":\"MIT\"},\"contracts/DuelToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./TransactionThrottler.sol\\\";\\n\\ncontract DuelToken is ERC20Mintable, TransactionThrottler {\\n    constructor() public ERC20Mintable(\\\"Duel Network\\\", \\\"DUEL\\\") {\\n        _mint(msg.sender, 20000000e18);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override transactionThrottler(sender, recipient, amount) {\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Mintable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c46b4462d0a25a69875aa1e0f756cc4cac7beedc0e3165f92a7f1402bb5eae6\",\"license\":\"UNLICENSED\"},\"contracts/ERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract ERC20Mintable is Context, AccessControl, ERC20Burnable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n    }\\n\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20Mintable: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x949a3056b0f211a399072e842e7eb9cb859702aadc1733b2618834deb3e05d56\",\"license\":\"MIT\"},\"contracts/TransactionThrottler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract TransactionThrottler is Ownable {\\n    uint256 private _tradingStart;\\n    uint256 private _restrictionEndTime;\\n    uint256 private _maxTransferAmount;\\n    mapping(address => bool) private _isWhitelisted;\\n    mapping(address => bool) private _isAllowed;\\n    mapping(address => uint256) private _previousTx;\\n\\n    constructor() public {\\n        _tradingStart = block.timestamp + 1 days;\\n        _restrictionEndTime = _tradingStart + 10 minutes;\\n        _maxTransferAmount = 35000 * 10**18;\\n        _isAllowed[msg.sender] = true;\\n    }\\n\\n    function setTradingStart(uint256 time) external onlyOwner {\\n        require(_tradingStart > block.timestamp, \\\"Protection: To late\\\");\\n        _tradingStart = time;\\n        _restrictionEndTime = time + 10 minutes;\\n    }\\n\\n    function setMaxTransferAmount(uint256 amount) external onlyOwner {\\n        _maxTransferAmount = amount;\\n    }\\n\\n    function setWhitelisted(address account) external onlyOwner {\\n        _isWhitelisted[account] = true;\\n    }\\n\\n    function setAllowed(address account, bool value) external onlyOwner {\\n        _isAllowed[account] = value;\\n    }\\n\\n    modifier transactionThrottler(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        if (_tradingStart > block.timestamp) {\\n            require(_isAllowed[sender] || _isAllowed[recipient], \\\"Protection: Transfers disabled\\\");\\n        } else if (_tradingStart <= block.timestamp && _restrictionEndTime > block.timestamp) {\\n            if (!_isAllowed[sender] || !_isAllowed[recipient]) {\\n                require(amount <= _maxTransferAmount, \\\"Protection: Limit exceeded\\\");\\n            }\\n\\n            if (!_isWhitelisted[sender] && !_isWhitelisted[recipient]) {\\n                require(\\n                    _previousTx[sender] + 60 <= block.timestamp && _previousTx[recipient] + 60 <= block.timestamp,\\n                    \\\"Protection: 1 tx/min allowed\\\"\\n                );\\n                _previousTx[sender] = block.timestamp;\\n                _previousTx[recipient] = block.timestamp;\\n            } else if (!_isWhitelisted[recipient]) {\\n                require(_previousTx[recipient] + 60 <= block.timestamp, \\\"Protection: 1 tx/min allowed\\\");\\n                _previousTx[recipient] = block.timestamp;\\n            } else if (!_isWhitelisted[sender]) {\\n                require(_previousTx[sender] + 60 <= block.timestamp, \\\"Protection: 1 tx/min allowed\\\");\\n                _previousTx[sender] = block.timestamp;\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x93183d3519c70bebe8446f7a863c939a965dad19185aef1dfd0a5575a6415c98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526019600255610190600355670de0b6b3a76400006006556000600e553480156200002d57600080fd5b50604051620036c1380380620036c1833981810160405260e08110156200005357600080fd5b815160208301516040808501516060860151608087015160a088015160c089018051955197999698949793969295919483019291846401000000008211156200009b57600080fd5b908301906020820185811115620000b157600080fd5b8251866020820283011164010000000082111715620000cf57600080fd5b82525081516020918201928201910280838360005b83811015620000fe578181015183820152602001620000e4565b5050505090500160405250505060006200011d6200020160201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600580546001600160a01b03808a166001600160a01b031992831617909255600480549289169290911691909117905560078590556008849055600983905560005b8151811015620001e857620001df83838381518110620001c957fe5b602002602001015160006200020560201b60201c565b600101620001ad565b5050600b805460ff191690555062000776945050505050565b3390565b6200020f62000201565b6001600160a01b031662000222620003bf565b6001600160a01b0316146200027e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000600b5460ff1660038111156200029257fe5b14620002d05760405162461bcd60e51b81526004018080602001828103825260238152602001806200369e6023913960400191505060405180910390fd5b8015620002e157620002e1620003ce565b620002fd82600e54620003f360201b620025411790919060201c565b600e81905550600c6040518060c00160405280856001600160a01b031681526020016000815260200184815260200160075443116200033f5760075462000341565b435b815260006020808301829052604092830182905284546001808201875595835291819020845160069093020180546001600160a01b0319166001600160a01b03909316929092178255830151938101939093558101516002830155606081015160038301556080810151600483015560a00151600590910155505050565b6000546001600160a01b031690565b60005b600c54811015620003f057620003e78162000457565b600101620003d1565b50565b6000828201838110156200044e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000600c82815481106200046757fe5b906000526020600020906006020190508060030154431115806200048c575060075443105b806200049e5750600854816003015410155b15620004ab5750620003f0565b600181015480620004c4575043600390910155620003f0565b60006008544311620004d75743620004db565b6008545b90506000620004f58460030154836200063560201b60201c565b905060006200054d600e5462000539876002015462000525600654876200065160201b6200259b1790919060201c565b6200065160201b6200259b1790919060201c565b620006af60201b620025f41790919060201c565b90506200059062000577856200053964e8d4a51000856200065160201b6200259b1790919060201c565b8660040154620003f360201b620025411790919060201c565b6004860155600385018390556005850154620005b99082620003f3602090811b6200254117901c565b60058087019190915554604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b1580156200061457600080fd5b505af115801562000629573d6000803e3d6000fd5b50505050505050505050565b60006200044e83836200071860201b6200265b1790919060201c565b600082620006625750600062000451565b828202828482816200067057fe5b04146200044e5760405162461bcd60e51b81526004018080602001828103825260218152602001806200367d6021913960400191505060405180910390fd5b600080821162000706576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816200071057fe5b049392505050565b60008282111562000770576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b612ef780620007866000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80637f8661a111610146578063d18df53c116100c3578063e2bbb15811610087578063e2bbb158146105d9578063e738d2b3146105fc578063e74b981b14610604578063ecefc7051461062a578063f2fde38b14610632578063f35e4a6e1461065857610253565b8063d18df53c14610578578063d2618baf146105a4578063dc16041a146105ac578063dd0d145f146105c9578063e26cc3d7146105d157610253565b80639416c7cd1161010a5780639416c7cd146104fa578063a408bb4c1461052e578063ac1e502514610536578063b7aa8f1014610553578063c713aa941461055b57610253565b80637f8661a11461045e5780638bc7e8c41461047b5780638da5cb5b146104835780638dbb1e3a1461048b57806393f1a40b146104ae57610253565b806346ca6bea116101d457806359b599dc1161019857806359b599dc146103f9578063630b5ba114610416578063676fdbb11461041e578063715018a61461044e5780637e6d17e71461045657610253565b806346ca6bea1461036f57806348cd4cb11461039a57806348d298bf146103a257806351eb05a6146103bf5780635312ea8e146103dc57610253565b80633c3777371161021b5780633c377737146102f9578063411330bd146103015780634198709a14610320578063441a3e7014610328578063469048401461034b57610253565b8063081e3eda14610258578063083c6323146102725780630f332a8a1461027a5780631526fe271461029757806317caf6f1146102f1575b600080fd5b610260610675565b60408051918252519081900360200190f35b61026061067b565b6102606004803603602081101561029057600080fd5b5035610681565b6102b4600480360360208110156102ad57600080fd5b50356106ca565b604080516001600160a01b0390971687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b610260610717565b61026061071d565b61031e6004803603602081101561031757600080fd5b5035610723565b005b610260610894565b61031e6004803603604081101561033e57600080fd5b508035906020013561089a565b610353610ac1565b604080516001600160a01b039092168252519081900360200190f35b61031e6004803603606081101561038557600080fd5b50803590602081013590604001351515610ad0565b610260610bfa565b61031e600480360360208110156103b857600080fd5b5035610c00565b61031e600480360360208110156103d557600080fd5b5035610cbd565b61031e600480360360208110156103f257600080fd5b5035610e30565b61031e6004803603602081101561040f57600080fd5b5035610f21565b61031e611024565b610426611042565b6040518083815260200182600381111561043c57fe5b81526020019250505060405180910390f35b61031e61104e565b6102606110fa565b61031e6004803603602081101561047457600080fd5b5035611100565b6102606113a9565b6103536113af565b610260600480360360408110156104a157600080fd5b50803590602001356113be565b6104da600480360360408110156104c457600080fd5b50803590602001356001600160a01b03166113d3565b604080519384526020840192909252151582820152519081900360600190f35b61031e6004803603606081101561051057600080fd5b506001600160a01b0381351690602081013590604001351515611402565b61031e61158e565b61031e6004803603602081101561054c57600080fd5b5035611830565b6102606118ee565b61031e6004803603602081101561057157600080fd5b50356118f4565b6102606004803603604081101561058e57600080fd5b50803590602001356001600160a01b0316611a2a565b61031e611d2c565b61031e600480360360208110156105c257600080fd5b5035611dfc565b610353611ec7565b61031e611ed6565b61031e600480360360408110156105ef57600080fd5b5080359060200135611fa3565b6102606121e1565b61031e6004803603602081101561061a57600080fd5b50356001600160a01b03166121e7565b6102606122c6565b61031e6004803603602081101561064857600080fd5b50356001600160a01b03166122cc565b61031e6004803603602081101561066e57600080fd5b50356123ce565b600c5490565b60085481565b60006106c2600e546106bc600c858154811061069957fe5b90600052602060002090600602016002015460065461259b90919063ffffffff16565b906125f4565b90505b919050565b600c81815481106106d757fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909286565b600e5481565b60095481565b61072b6126b8565b6001600160a01b031661073c6113af565b6001600160a01b031614610785576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff16600381111561079857fe5b146107d45760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b6801a055690d9db80000811115610832576040805162461bcd60e51b815260206004820152601860248201527f4475656c4576656e743a204d61782070657220626c6f636b0000000000000000604482015290519081900360640190fd5b670de0b6b3a764000081101561088f576040805162461bcd60e51b815260206004820152601860248201527f4475656c4576656e743a204d696e2070657220626c6f636b0000000000000000604482015290519081900360640190fd5b600655565b60065481565b600260015414156108f2576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015580610942576040805162461bcd60e51b8152602060048201526016602482015275111d595b115d995b9d0e8816995c9bc8185b5bdd5b9d60521b604482015290519081900360640190fd5b6000600c838154811061095157fe5b60009182526020808320868452600d8252604080852033865290925292208054600690920290920192508311156109b95760405162461bcd60e51b815260040180806020018281038252602b815260200180612cfd602b913960400191505060405180910390fd5b6109c284610cbd565b6109f46109e964e8d4a510006106bc8560040154856000015461259b90919063ffffffff16565b600183015490612541565b60018201556000610a04856126bc565b90506000610a128286612730565b90506000610a20838761274c565b8454909150610a2f908761265b565b84556001850154610a40908761265b565b60018601558454610a5b906001600160a01b0316338461275e565b8015610a7d576004548554610a7d916001600160a01b0391821691168361275e565b604080518381529051889133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050600180555050505050565b6004546001600160a01b031681565b610ad86126b8565b6001600160a01b0316610ae96113af565b6001600160a01b031614610b32576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff166003811115610b4557fe5b14610b815760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b8015610b8f57610b8f611024565b610bcc82610bc6600c8681548110610ba357fe5b906000526020600020906006020160020154600e5461265b90919063ffffffff16565b90612541565b600e8190555081600c8481548110610be057fe5b906000526020600020906006020160020181905550505050565b60075481565b610c086126b8565b6001600160a01b0316610c196113af565b6001600160a01b031614610c62576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6064811115610cb8576040805162461bcd60e51b815260206004820152601a60248201527f4475656c4576656e743a204d617820636c616d696e6720666565000000000000604482015290519081900360640190fd5b600255565b6000600c8281548110610ccc57fe5b90600052602060002090600602019050806003015443111580610cf0575060075443105b80610d015750600854816003015410155b15610d0c5750610e2d565b600181015480610d23575043600390910155610e2d565b60006008544311610d345743610d38565b6008545b90506000610d4a8460030154836113be565b90506000610d77600e546106bc8760020154610d716006548761259b90919063ffffffff16565b9061259b565b9050610d9a610d8f856106bc8464e8d4a5100061259b565b600487015490612541565b6004860155600385018390556005850154610db59082612541565b60058087019190915554604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b158015610e0f57600080fd5b505af1158015610e23573d6000803e3d6000fd5b5050505050505050505b50565b6000600c8281548110610e3f57fe5b60009182526020808320858452600d82526040808520338652909252922080546006929092029092016001810154909350610e799161265b565b60018301558054600090610e90906109c490612730565b90506000610ea46109c4846000015461274c565b600080855560018501558454909150610ec7906001600160a01b0316338461275e565b6004548454610ee3916001600160a01b0391821691168361275e565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b610f296126b8565b6001600160a01b0316610f3a6113af565b6001600160a01b031614610f83576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff166003811115610f9657fe5b14610fd25760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b60075481118015610fe4575060085481105b61101f5760405162461bcd60e51b8152600401808060200182810382526022815260200180612cb56022913960400191505060405180910390fd5b600955565b60005b600c54811015610e2d5761103a81610cbd565b600101611027565b600a54600b5460ff1682565b6110566126b8565b6001600160a01b03166110676113af565b6001600160a01b0316146110b0576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6109c481565b60026001541415611158576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556000600b5460ff16600381111561117057fe5b14156111ad5760405162461bcd60e51b8152600401808060200182810382526027815260200180612dea6027913960400191505060405180910390fd5b6000600c82815481106111bc57fe5b60009182526020808320858452600d82526040808520338652909252922060028101546006909202909201925060ff161561123e576040805162461bcd60e51b815260206004820152601a60248201527f4475656c4576656e743a20436c61696d656420616c7265616479000000000000604482015290519081900360640190fd5b61124783610cbd565b60006112538433611a2a565b82549091501561131b576000611268856126bc565b9050600061127a828560000154612730565b9050600061128c83866000015461274c565b600080875560018801549192506112a3919061265b565b600187015585546112be906001600160a01b0316338461275e565b80156112e05760045486546112e0916001600160a01b0391821691168361275e565b604080518381529051889133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505b60028201805460ff1916600117905580156113725761133a33826127b5565b604080518281529051859133917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf79181900360200190a35b604051849033907f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b29963190600090a35050600180555050565b60035481565b6000546001600160a01b031690565b60006113ca828461265b565b90505b92915050565b600d60209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b61140a6126b8565b6001600160a01b031661141b6113af565b6001600160a01b031614611464576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff16600381111561147757fe5b146114b35760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b80156114c1576114c1611024565b600e546114ce9083612541565b600e81905550600c6040518060c00160405280856001600160a01b0316815260200160008152602001848152602001600754431161150e57600754611510565b435b815260006020808301829052604092830182905284546001808201875595835291819020845160069093020180546001600160a01b0319166001600160a01b03909316929092178255830151938101939093558101516002830155606081015160038301556080810151600483015560a00151600590910155505050565b6115966126b8565b6001600160a01b03166115a76113af565b6001600160a01b0316146115f0576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff16600381111561160357fe5b14156116405760405162461bcd60e51b8152600401808060200182810382526027815260200180612dea6027913960400191505060405180910390fd5b600c60008154811061164e57fe5b600091825260209182902060069091020154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156116a257600080fd5b505afa1580156116b6573d6000803e3d6000fd5b505050506040513d60208110156116cc57600080fd5b50511561170a5760405162461bcd60e51b8152600401808060200182810382526024815260200180612dc66024913960400191505060405180910390fd5b600554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d602081101561177f57600080fd5b50519050806117d5576040805162461bcd60e51b815260206004820152601760248201527f4475656c4576656e743a205a65726f2062616c616e6365000000000000000000604482015290519081900360640190fd5b6004546117eb906001600160a01b0316826127b5565b6004546040805183815290516001600160a01b03909216917f1ef1ff9107f9a7baefaf4a78cf58f97ba90340cea73be99daa7d96af301d55f99181900360200190a250565b6118386126b8565b6001600160a01b03166118496113af565b6001600160a01b031614611892576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6103e88111156118e9576040805162461bcd60e51b815260206004820152601d60248201527f4475656c4576656e743a204d6178207769746864726177616c20666565000000604482015290519081900360640190fd5b600355565b60065490565b6118fc6126b8565b6001600160a01b031661190d6113af565b6001600160a01b031614611956576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff16600381111561196957fe5b146119a55760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b43600854116119e55760405162461bcd60e51b8152600401808060200182810382526022815260200180612e7d6022913960400191505060405180910390fd5b6007548111611a255760405162461bcd60e51b8152600401808060200182810382526036815260200180612d6f6036913960400191505060405180910390fd5b600855565b6000611a34612c1f565b600c8481548110611a4157fe5b60009182526020918290206040805160c081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460a08201529050611aa9612c5e565b506000848152600d602090815260408083206001600160a01b03871684528252918290208251606081018452815481526001820154928101929092526002015460ff16151591810191909152600754431080611b06575080604001515b15611b16576000925050506113cd565b60808201516020830151606084015143118015611b3257508015155b15611baa5760006008544311611b485743611b4c565b6008545b90506000611b5e8660600151836113be565b90506000611b85600e546106bc8960400151610d716006548761259b90919063ffffffff16565b9050611ba4611b9d856106bc8464e8d4a5100061259b565b8690612541565b94505050505b6000611bd48460200151610bc664e8d4a510006106bc87896000015161259b90919063ffffffff16565b90506001600b5460ff166003811115611be957fe5b148015611bf75750600a5488145b15611cdb5760a0850151600090611c17906106bc8464e8d4a5100061259b565b905060005b600c54811015611cd457600a548114611ccc57611c37612c1f565b600c8281548110611c4457fe5b60009182526020918290206040805160c081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460a08201819052909150611cc890611cc19064e8d4a51000906106bc90879061259b565b8590612541565b9350505b600101611c1c565b5050611d21565b6001600b5460ff166003811115611cee57fe5b148015611cfd5750600a548814155b80611d1857506003600b5460ff166003811115611d1657fe5b145b15611d21575060005b979650505050505050565b611d346126b8565b6001600160a01b0316611d456113af565b6001600160a01b031614611d8e576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff166003811115611da157fe5b14611ddd5760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b611de5611024565b600b80546003919060ff19166001835b0217905550565b611e046126b8565b6001600160a01b0316611e156113af565b6001600160a01b031614611e5e576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff166003811115611e7157fe5b14611ead5760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b611eb5611024565b600b805460ff19166001179055600a55565b6005546001600160a01b031681565b611ede6126b8565b6001600160a01b0316611eef6113af565b6001600160a01b031614611f38576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff166003811115611f4b57fe5b14611f875760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b611f8f611024565b600b80546002919060ff1916600183611df5565b60026001541415611ffb576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556000600b5460ff16600381111561201357fe5b1461204f5760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b60095443106120a5576040805162461bcd60e51b815260206004820152601b60248201527f4475656c4576656e743a204465706f73697420646561646c696e650000000000604482015290519081900360640190fd5b600081116120f3576040805162461bcd60e51b8152602060048201526016602482015275111d595b115d995b9d0e8816995c9bc8185b5bdd5b9d60521b604482015290519081900360640190fd5b6000600c838154811061210257fe5b60009182526020808320868452600d8252604080852033865290925292206006909102909101915061213384610cbd565b805415612167576121616109e964e8d4a510006106bc8560040154856000015461259b90919063ffffffff16565b60018201555b80546121739084612541565b815560018201546121849084612541565b600183015581546121a0906001600160a01b0316333086612904565b604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050600180555050565b60025481565b6121ef6126b8565b6001600160a01b03166122006113af565b6001600160a01b031614612249576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6001600160a01b0381166122a4576040805162461bcd60e51b815260206004820152601d60248201527f4475656c4576656e743a205a65726f2066656520726563697069656e74000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61271081565b6122d46126b8565b6001600160a01b03166122e56113af565b6001600160a01b03161461232e576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6001600160a01b0381166123735760405162461bcd60e51b8152600401808060200182810382526026815260200180612cd76026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6123d66126b8565b6001600160a01b03166123e76113af565b6001600160a01b031614612430576040805162461bcd60e51b81526020600482018190526024820152600080516020612e11833981519152604482015290519081900360640190fd5b6000600b5460ff16600381111561244357fe5b1461247f5760405162461bcd60e51b8152600401808060200182810382526023815260200180612e9f6023913960400191505060405180910390fd5b43600754116124bf5760405162461bcd60e51b8152600401808060200182810382526021815260200180612d4e6021913960400191505060405180910390fd5b60085481106124ff5760405162461bcd60e51b8152600401808060200182810382526033815260200180612c826033913960400191505060405180910390fd5b600781905560005b600c5481101561253d57600754600c828154811061252157fe5b6000918252602090912060036006909202010155600101612507565b5050565b6000828201838110156113ca576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826125aa575060006113cd565b828202828482816125b757fe5b04146113ca5760405162461bcd60e51b8152600401808060200182810382526021815260200180612da56021913960400191505060405180910390fd5b600080821161264a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161265357fe5b049392505050565b6000828211156126b2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3390565b600080600b5460ff1660038111156126d057fe5b14612727576001600b5460ff1660038111156126e857fe5b1480156126f65750600a5482145b8061271157506002600b5460ff16600381111561270f57fe5b145b1561271f57506002546106c5565b5060006106c5565b506003546106c5565b60006113ca6127106106bc612745828761265b565b859061259b565b60006113ca6127106106bc848661259b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526127b090849061295a565b505050565b600554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561280057600080fd5b505afa158015612814573d6000803e3d6000fd5b505050506040513d602081101561282a57600080fd5b50519050600081831161283d578261283f565b815b6005546040805163a9059cbb60e01b81526001600160a01b03888116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561289757600080fd5b505af11580156128ab573d6000803e3d6000fd5b505050506040513d60208110156128c157600080fd5b50516128fe5760405162461bcd60e51b8152600401808060200182810382526022815260200180612e316022913960400191505060405180910390fd5b50505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526128fe9085905b60606129af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a0b9092919063ffffffff16565b8051909150156127b0578080602001905160208110156129ce57600080fd5b50516127b05760405162461bcd60e51b815260040180806020018281038252602a815260200180612e53602a913960400191505060405180910390fd5b6060612a1a8484600085612a24565b90505b9392505050565b606082471015612a655760405162461bcd60e51b8152600401808060200182810382526026815260200180612d286026913960400191505060405180910390fd5b612a6e85612b75565b612abf576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612afe5780518252601f199092019160209182019101612adf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b60576040519150601f19603f3d011682016040523d82523d6000602084013e612b65565b606091505b5091509150611d21828286612b7b565b3b151590565b60608315612b8a575081612a1d565b825115612b9a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612be4578181015183820152602001612bcc565b50505050905090810190601f168015612c115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600015158152509056fe4475656c4576656e743a20537461727420626c6f636b2073686f756c64206265206c657373207468656e20656e64426c6f636b4475656c4576656e743a2057726f6e67206465706f73697420656e6420626c6f636b4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734475656c4576656e743a205769746864726177616c20616d6f756e74206578636565642062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4475656c4576656e743a204576656e7420686173206265656e20737461727465644475656c4576656e743a20456e6420626c6f636b2073686f756c642062652067726561746572207468656e207374617274426c6f636b536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774475656c4576656e743a204e6f7420616c6c2075736572732068617320636c61696d65644475656c4576656e743a204576656e7420686173206e6f74206265656e20636f6e636c756465644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724475656c4576656e743a2073616665546f6b656e5472616e73666572206572726f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644475656c4576656e743a204576656e7420686173206265656e2066696e69736865644475656c4576656e743a204576656e7420686173206265656e20636f6e636c75646564a26469706673582212201ebec1924fb0038c4483a168a91e136142b42b39851d28dd5fa21a74eb35290f64736f6c634300060c0033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774475656c4576656e743a204576656e7420686173206265656e20636f6e636c75646564",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address,uint256,bool)": {
        "details": "Adds a new pool, only owner."
      },
      "claimLeftovers()": {
        "details": "Sends leftover tokens to the fee recipient, only owner."
      },
      "deposit(uint256,uint256)": {
        "details": "Deposit LP tokens to the pool for reward token allocation."
      },
      "emergencyWithdraw(uint256)": {
        "details": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "exit(uint256)": {
        "details": "Exit pool and claim rewards"
      },
      "getBaseRewardPerBlock()": {
        "details": "Returns base reward per block."
      },
      "getMultiplier(uint256,uint256)": {
        "details": "Returns reward multiplier over the given _from to _to block."
      },
      "getPoolRewardPerBlock(uint256)": {
        "details": "Returns the pool specific reward per block."
      },
      "massUpdatePools()": {
        "details": "Updates reward vairables for all pools. Be careful of gas spending!"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRewards(uint256,address)": {
        "details": "Returns pending rewards for user."
      },
      "poolLength()": {
        "details": "Returns the poolInfo length."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCancel()": {
        "details": "Sets event status to EventResultStatus.Cancel. Only owner."
      },
      "setClaimingFee(uint256)": {
        "details": "Updates claming fee, max is 1%, only owner."
      },
      "setDepositEndBlock(uint256)": {
        "details": "Updates deposit end block, only owner."
      },
      "setDraw()": {
        "details": "Sets event status to EventResultStatus.Draw. Only owner."
      },
      "setEndBlock(uint256)": {
        "details": "Updates end block, only owner."
      },
      "setFeeRecipient(address)": {
        "details": "Updates fee recipient, only owner."
      },
      "setPool(uint256,uint256,bool)": {
        "details": "Updates pool allocation points, only owner."
      },
      "setStartBlock(uint256)": {
        "details": "Updates start block, only owner."
      },
      "setTokenPerBlock(uint256)": {
        "details": "Updates reward per block, only owner."
      },
      "setWin(uint256)": {
        "details": "Sets event status to EventResultStatus.Win and selects winner pool. Only owner."
      },
      "setWithdrawalFee(uint256)": {
        "details": "Updates withdrawal fee, max is 10%, only owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "details": "Updates reward vairables for the pool."
      },
      "withdraw(uint256,uint256)": {
        "details": "Withdraw LP tokens from the pool."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2422,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2498,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "claimingFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2501,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2503,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2505,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "DUEL",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(DuelToken)4241"
      },
      {
        "astId": 2508,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "tokenPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2510,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "startBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2512,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "endBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2514,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "depositEndBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2526,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "eventResult",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(EventResult)2524_storage"
      },
      {
        "astId": 2529,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(PoolInfo)2489_storage)dyn_storage"
      },
      {
        "astId": 2535,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "userInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2476_storage))"
      },
      {
        "astId": 2538,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)2489_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)2489_storage",
        "encoding": "dynamic_array",
        "label": "struct DuelEvent.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DuelToken)4241": {
        "encoding": "inplace",
        "label": "contract DuelToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1387": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(EventResultStatus)2519": {
        "encoding": "inplace",
        "label": "enum DuelEvent.EventResultStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)2476_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DuelEvent.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2476_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2476_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DuelEvent.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2476_storage)"
      },
      "t_struct(EventResult)2524_storage": {
        "encoding": "inplace",
        "label": "struct DuelEvent.EventResult",
        "members": [
          {
            "astId": 2521,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "winnerPid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2523,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(EventResultStatus)2519"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)2489_storage": {
        "encoding": "inplace",
        "label": "struct DuelEvent.PoolInfo",
        "members": [
          {
            "astId": 2478,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1387"
          },
          {
            "astId": 2480,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2482,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2484,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2486,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2488,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "totalRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)2476_storage": {
        "encoding": "inplace",
        "label": "struct DuelEvent.UserInfo",
        "members": [
          {
            "astId": 2471,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2473,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "pendingReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2475,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}