{
  "address": "0x0F06110d031929e8487ac0c7548dB49BB23c41ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DuelToken",
          "name": "_DUEL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_refAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_perBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocationPoints",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_BP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DUEL",
      "outputs": [
        {
          "internalType": "contract DuelToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REF_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimAndExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockDevWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "selectWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dev",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ref",
          "type": "address"
        }
      ],
      "name": "setRefAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        }
      ],
      "name": "setRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerSelected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawDevAndRefFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12c5e6ad894614e1b1182944636915d9b56fbe3e513f19fa220f6f79c62a17f5",
  "receipt": {
    "to": null,
    "from": "0xE293014dC435f2263088cF726a32E537941F96Fa",
    "contractAddress": "0x0F06110d031929e8487ac0c7548dB49BB23c41ba",
    "transactionIndex": 35,
    "gasUsed": "2256122",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000800000000000000000000000000000000000000000000000020000000000000000000080000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000002008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000001000000000000000000",
    "blockHash": "0x5b4e149edf431c38b3991c734005cb6e0cd2d2cd483b1534cc2e4e48b24cc89c",
    "transactionHash": "0x12c5e6ad894614e1b1182944636915d9b56fbe3e513f19fa220f6f79c62a17f5",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 11560795,
        "transactionHash": "0x12c5e6ad894614e1b1182944636915d9b56fbe3e513f19fa220f6f79c62a17f5",
        "address": "0x0F06110d031929e8487ac0c7548dB49BB23c41ba",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e293014dc435f2263088cf726a32e537941f96fa"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x5b4e149edf431c38b3991c734005cb6e0cd2d2cd483b1534cc2e4e48b24cc89c"
      }
    ],
    "blockNumber": 11560795,
    "cumulativeGasUsed": "7002206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4aa3b6dA6898E3770CFaaBC343AdF1de8c29b8c0",
    "0xE293014dC435f2263088cF726a32E537941F96Fa",
    "0xE293014dC435f2263088cF726a32E537941F96Fa",
    "2000000000000000000",
    11560687,
    23121374,
    "0x5537487b4f0188E8B9b5DcD2FCDC032C92E50480",
    [100, 100]
  ],
  "solcInputHash": "1da209f8fc828ab97b6f70013f87cc2f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DuelToken\",\"name\":\"_DUEL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocationPoints\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUEL\",\"outputs\":[{\"internalType\":\"contract DuelToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimAndExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockDevWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"selectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"setRefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerSelected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevAndRefFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAndExit(uint256)\":{\"details\":\"Returns pending rewards for user.\"},\"deposit(uint256,uint256)\":{\"details\":\"Deposit LP tokens to the pool for reward token allocation.\"},\"emergencyWithdraw(uint256)\":{\"details\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"getBaseRewardPerBlock()\":{\"details\":\"Returns the pool specific reward per block.\"},\"getMultiplier(uint256,uint256)\":{\"details\":\"Returns reward multiplier over the given _from to _to block.\"},\"getPoolRewardPerBlock(uint256)\":{\"details\":\"Returns the pool specific reward per block.\"},\"massUpdatePools()\":{\"details\":\"Updates reward vairables for all pools. Be careful of gas spending!\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRewards(uint256,address)\":{\"details\":\"Returns pending rewards for user.\"},\"poolLength()\":{\"details\":\"Returns the poolInfo length.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"selectWinner(uint256)\":{\"details\":\"Select winner pool. Can only be called by the owner.\"},\"set(uint256,uint256,bool)\":{\"details\":\"Updates pool allocation points. Can only be called by the owner.\"},\"setDevAddress(address)\":{\"details\":\"Updates dev address, only owner.\"},\"setPerBlock(uint256)\":{\"details\":\"Updates reward per block, only owner.\"},\"setRefAddress(address)\":{\"details\":\"Updates ref address, only owner.\"},\"setRewardMultiplier(uint256)\":{\"details\":\"Updates reward multiplier, only owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"details\":\"Updates reward vairables for the pool.\"},\"withdraw(uint256,uint256)\":{\"details\":\"Withdraw LP tokens from the pool.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DuelEvent.sol\":\"DuelEvent\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/DuelEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./DuelToken.sol\\\";\\n\\ncontract DuelEvent is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 pendingReward; // Pending rewards\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 supply; // LP supply for this pool\\n        uint256 allocPoint; // How many allocation points assigned to this pool. DUELs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that DUELs distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated DUELs per share, times 1e12. See below.\\n        uint256 totalRewards;\\n    }\\n\\n    DuelToken public DUEL;\\n\\n    uint256 public constant BASE_BP = 10000;\\n    uint256 public constant STAKE_SHARE = 9900;\\n    uint256 public constant DEV_SHARE = 50;\\n    uint256 public constant REF_SHARE = 50;\\n    address public devAddress;\\n    address public refAddress;\\n    uint256 public lastBlockDevWithdraw;\\n\\n    uint256 public tokenPerBlock;\\n    uint256 public rewardMultiplier = 1;\\n\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    uint256 public totalAllocPoint = 0;\\n\\n    uint256 public startBlock;\\n    uint256 public endBlock;\\n\\n    uint256 public winnerPoolId;\\n    bool public winnerSelected = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(\\n        DuelToken _DUEL,\\n        address _devAddress,\\n        address _refAddress,\\n        uint256 _perBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        IERC20 _lpToken,\\n        uint256[] memory _allocationPoints\\n    ) public {\\n        DUEL = _DUEL;\\n        devAddress = _devAddress;\\n        refAddress = _refAddress;\\n        tokenPerBlock = _perBlock;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        lastBlockDevWithdraw = _startBlock;\\n        for (uint256 i = 0; i < _allocationPoints.length; i++) {\\n            add(_allocationPoints[i], _lpToken, false);\\n        }\\n    }\\n\\n    function withdrawDevAndRefFee() public {\\n        require(block.number >= startBlock, \\\"DuelEvent: Farming has not started yet\\\");\\n        require(block.number >= endBlock, \\\"DuelEvent: Farming has not finished yet\\\");\\n        require(winnerSelected, \\\"DuelEvent: Winner pool has not selected yet\\\");\\n        require(lastBlockDevWithdraw < block.number, \\\"DuelEvent: Rewards already claimed\\\");\\n\\n        uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n\\n        uint256 multiplier = getMultiplier(lastBlockDevWithdraw, toBlock);\\n        uint256 reward = multiplier.mul(tokenPerBlock);\\n        DUEL.mint(devAddress, reward.mul(DEV_SHARE).div(BASE_BP));\\n        DUEL.mint(refAddress, reward.mul(REF_SHARE).div(BASE_BP));\\n        lastBlockDevWithdraw = block.number;\\n    }\\n\\n    /**\\n     * @dev Adds a new pool. Can only be called by the owner.\\n     */\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) private {\\n        require(!winnerSelected, \\\"DuelEvent: Winner pool has been selected\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                supply: 0,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accTokenPerShare: 0,\\n                totalRewards: 0\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates pool allocation points. Can only be called by the owner.\\n     */\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(!winnerSelected, \\\"DuelEvent: Winner pool has been selected\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    /**\\n     * @dev Select winner pool. Can only be called by the owner.\\n     */\\n    function selectWinner(uint256 _pid) public onlyOwner {\\n        massUpdatePools();\\n\\n        winnerSelected = true;\\n        winnerPoolId = _pid;\\n    }\\n\\n    /**\\n     * @dev Updates reward vairables for all pools. Be careful of gas spending!\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates reward vairables for the pool.\\n     */\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.supply;\\n        if (lpSupply <= 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, toBlock);\\n        uint256 reward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint).mul(STAKE_SHARE).div(\\n            BASE_BP\\n        );\\n\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(reward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n        pool.totalRewards = pool.totalRewards.add(reward);\\n\\n        DUEL.mint(address(this), reward);\\n    }\\n\\n    /**\\n     * @dev Returns pending rewards for user.\\n     */\\n    function claimAndExit(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(block.number >= startBlock, \\\"DuelEvent: Farming has not started yet\\\");\\n        require(block.number >= endBlock, \\\"DuelEvent: Farming has not finished yet\\\");\\n        require(winnerSelected, \\\"DuelEvent: Winner pool has not selected yet\\\");\\n        require(_pid == winnerPoolId, \\\"DuelEvent: Cannot claim from lose pool\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 userReward = user.pendingReward.add(user.amount.mul(pool.accTokenPerShare).div(1e12));\\n\\n        uint256 userShare = userReward.div(pool.totalRewards);\\n\\n        uint256 length = poolInfo.length;\\n\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if (pid != winnerPoolId) {\\n                PoolInfo memory _pool = poolInfo[pid];\\n                userReward = userReward.add(userShare.mul(_pool.totalRewards));\\n            }\\n        }\\n\\n        if (user.amount > 0) {\\n            pool.supply = pool.supply.sub(user.amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n            emit Withdraw(msg.sender, _pid, user.amount);\\n            user.amount = 0;\\n        }\\n\\n        safeTokenTransfer(msg.sender, userReward);\\n\\n        emit Claim(msg.sender, _pid, userReward);\\n    }\\n\\n    /**\\n     * @dev Returns reward multiplier over the given _from to _to block.\\n     */\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(rewardMultiplier);\\n    }\\n\\n    /**\\n     * @dev Returns pending rewards for user.\\n     */\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = pool.supply;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, toBlock);\\n            uint256 reward = multiplier\\n                .mul(tokenPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint)\\n                .mul(STAKE_SHARE)\\n                .div(BASE_BP);\\n            accTokenPerShare = accTokenPerShare.add(reward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accTokenPerShare).div(1e12);\\n    }\\n\\n    /**\\n     * @dev Returns the poolInfo length.\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @dev Returns the pool specific reward per block.\\n     */\\n    function getBaseRewardPerBlock() public view returns (uint256) {\\n        uint256 multiplier = getMultiplier(block.number.sub(1), block.number);\\n        return multiplier.mul(tokenPerBlock);\\n    }\\n\\n    /**\\n     * @dev Returns the pool specific reward per block.\\n     */\\n    function getPoolRewardPerBlock(uint256 _pid) public view returns (uint256) {\\n        uint256 multiplier = getMultiplier(block.number.sub(1), block.number);\\n        return multiplier.mul(tokenPerBlock).mul(poolInfo[_pid].allocPoint).div(totalAllocPoint);\\n    }\\n\\n    /**\\n     * @dev Deposit LP tokens to the pool for reward token allocation.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        pool.supply = pool.supply.add(_amount);\\n\\n        updatePool(_pid);\\n\\n        if (user.amount > 0) {\\n            user.pendingReward = user.pendingReward.add(user.amount.mul(pool.accTokenPerShare).div(1e12));\\n        }\\n\\n        user.amount = user.amount.add(_amount);\\n\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw LP tokens from the pool.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"DuelEvent: Withdrawal amount exceed balance\\\");\\n\\n        pool.supply = pool.supply.sub(_amount);\\n\\n        updatePool(_pid);\\n\\n        if (user.amount > 0) {\\n            user.pendingReward = user.pendingReward.add(user.amount.mul(pool.accTokenPerShare).div(1e12));\\n        }\\n\\n        user.amount = user.amount.sub(_amount);\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\n     */\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        pool.supply = pool.supply.sub(user.amount);\\n\\n        user.amount = 0;\\n        user.pendingReward = 0;\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /**\\n     * @dev Safe token transfer function, just in case if rounding error\\n     * causes pool to not have enough token balance.\\n     */\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 balance = DUEL.balanceOf(address(this));\\n        if (_amount > balance) {\\n            DUEL.transfer(_to, balance);\\n        } else {\\n            DUEL.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates dev address, only owner.\\n     */\\n    function setDevAddress(address _dev) external onlyOwner {\\n        devAddress = _dev;\\n    }\\n\\n    /**\\n     * @dev Updates ref address, only owner.\\n     */\\n    function setRefAddress(address _ref) external onlyOwner {\\n        refAddress = _ref;\\n    }\\n\\n    /**\\n     * @dev Updates reward per block, only owner.\\n     */\\n    function setPerBlock(uint256 _amount) external onlyOwner {\\n        require(_amount <= 30 * 1e18, \\\"DuelEvent: Max per block\\\");\\n        require(_amount >= 1 * 1e18, \\\"DuelEvent: Min per block\\\");\\n        tokenPerBlock = _amount;\\n    }\\n\\n    /**\\n     * @dev Updates reward multiplier, only owner.\\n     */\\n    function setRewardMultiplier(uint256 _multiplier) external onlyOwner {\\n        rewardMultiplier = _multiplier;\\n    }\\n}\\n\",\"keccak256\":\"0x5f164608980893d1e745ac03541d994c23e5f85238665656aa42f7788f05d3e5\",\"license\":\"MIT\"},\"contracts/DuelToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./TransactionThrottler.sol\\\";\\n\\ncontract DuelToken is ERC20Mintable, TransactionThrottler {\\n    constructor() public ERC20Mintable(\\\"Duel\\\", \\\"DUEL\\\") {\\n        _mint(msg.sender, 15000000e18);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override transactionThrottler(sender, recipient, amount) {\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Mintable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x09fb0b6fe83aae2182f62ffdb9afc71cf5900cee3c639802688efedf8f0741ad\",\"license\":\"UNLICENSED\"},\"contracts/ERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract ERC20Mintable is Context, Ownable, ERC20Burnable {\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {}\\n\\n    function mint(address to, uint256 amount) public virtual onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9d84f2b7b9a0d5901ebf4d07f5ac5b8dba44c63e0ed0c8d79f902663620e9f54\",\"license\":\"MIT\"},\"contracts/TransactionThrottler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract TransactionThrottler is Ownable {\\n    uint256 private _tradingStart;\\n    uint256 private _restrictionEndTime;\\n    uint256 private _maxTransferAmount;\\n    mapping(address => bool) private _isWhitelisted;\\n    mapping(address => uint256) private _previousTx;\\n\\n    constructor() public {\\n        _tradingStart = block.timestamp + 19 hours;\\n        _restrictionEndTime = _tradingStart + 10 * 60;\\n        _maxTransferAmount = 35000 * 10**18;\\n    }\\n\\n    function setTradingStart(uint256 time) external onlyOwner {\\n        require(_tradingStart > block.timestamp, \\\"Protection: To late\\\");\\n        _tradingStart = time;\\n        _restrictionEndTime = time + 10 * 60;\\n    }\\n\\n    function setMaxTransferAmount(uint256 amount) external onlyOwner {\\n        _maxTransferAmount = amount;\\n    }\\n\\n    function setWhitelisted(address account) external onlyOwner {\\n        _isWhitelisted[account] = true;\\n    }\\n\\n    modifier transactionThrottler(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        if (_tradingStart > block.timestamp) {\\n            require(sender == owner() || recipient == owner(), \\\"Protection: Transfers disabled\\\");\\n        } else if (_tradingStart <= block.timestamp && _restrictionEndTime > block.timestamp) {\\n            if (sender != owner() || recipient != owner()) {\\n                require(amount <= _maxTransferAmount, \\\"Protection: Limit exceeded\\\");\\n            }\\n\\n            if (!_isWhitelisted[sender] && !_isWhitelisted[recipient]) {\\n                require(\\n                    _previousTx[sender] + 60 <= block.timestamp && _previousTx[recipient] + 60 <= block.timestamp,\\n                    \\\"Protection: 1 tx/min allowed\\\"\\n                );\\n                _previousTx[sender] = block.timestamp;\\n                _previousTx[recipient] = block.timestamp;\\n            } else if (!_isWhitelisted[recipient]) {\\n                require(_previousTx[recipient] + 60 <= block.timestamp, \\\"Protection: 1 tx/min allowed\\\");\\n                _previousTx[recipient] = block.timestamp;\\n            } else if (!_isWhitelisted[sender]) {\\n                require(_previousTx[sender] + 60 <= block.timestamp, \\\"Protection: 1 tx/min allowed\\\");\\n                _previousTx[sender] = block.timestamp;\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x297d5ebcbe9e473f0c8a6af3befb2f5ec7f329133fe1253aa87cb9d1b6478ea5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016006556000600955600d805460ff191690553480156200002557600080fd5b50604051620028803803806200288083398181016040526101008110156200004c57600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a0180519651989a9799959894979396929591949391820192846401000000008211156200009c57600080fd5b908301906020820185811115620000b257600080fd5b8251866020820283011164010000000082111715620000d057600080fd5b82525081516020918201928201910280838360005b83811015620000ff578181015183820152602001620000e5565b5050505090500160405250505060006200011e6200020660201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b03808b166001600160a01b031992831617909255600280548a841690831617905560038054928916929091169190911790556005859055600a849055600b839055600484905560005b8151811015620001f757620001ee828281518110620001d757fe5b60200260200101518460006200020a60201b60201c565b600101620001bc565b5050505050505050506200077b565b3390565b600d5460ff16156200024e5760405162461bcd60e51b8152600401808060200182810382526028815260200180620028376028913960400191505060405180910390fd5b80156200025f576200025f620003df565b6000600a5443116200027457600a5462000276565b435b905062000294846009546200040660201b620017e81790919060201c565b6009556040805160c0810182526001600160a01b039485168152600060208201818152928201968752606082019384526080820181815260a0830182815260078054600181018255935292517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600690930292830180546001600160a01b031916919098161790965591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68983015594517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a82015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d90910155565b60075460005b818110156200040257620003f9816200046a565b600101620003e5565b5050565b60008282018381101562000461576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000600782815481106200047a57fe5b90600052602060002090600602019050806003015443116200049d575062000630565b600181015480620004b657504360039091015562000630565b6000600b544311620004c95743620004cd565b600b545b90506000620004e78460030154836200063360201b60201c565b905060006200054d612710620005396126ac62000525600954620005398b60020154620005256005548b6200065660201b620018421790919060201c565b6200065660201b620018421790919060201c565b620006b460201b6200189b1790919060201c565b90506200059062000577856200053964e8d4a51000856200065660201b620018421790919060201c565b86600401546200040660201b620017e81790919060201c565b60048601554360038601556005850154620005b8908262000406602090811b620017e817901c565b6005860155600154604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b1580156200061157600080fd5b505af115801562000626573d6000803e3d6000fd5b5050505050505050505b50565b6000620004616006546200052585856200071d60201b620019021790919060201c565b600082620006675750600062000464565b828202828482816200067557fe5b0414620004615760405162461bcd60e51b81526004018080602001828103825260218152602001806200285f6021913960400191505060405180910390fd5b60008082116200070b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816200071557fe5b049392505050565b60008282111562000775576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6120ac806200078b6000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80636f2c590a11610130578063b76e360c116100b8578063d18df53c1161007c578063d18df53c14610532578063dd0d145f1461055e578063e2bbb15814610566578063efce5fb614610589578063f2fde38b1461059157610232565b8063b76e360c146104ec578063b7aa8f10146104f4578063c7648c4f146104fc578063d0d41fe114610504578063d11c9c0a1461052a57610232565b806381952c24116100ff57806381952c24146104435780638d382812146104605780638da5cb5b1461047c5780638dbb1e3a1461048457806393f1a40b146104a757610232565b80636f2c590a14610416578063715018a61461041e5780637c186278146102375780637e94fda91461042657610232565b806337c01f28116101be5780634c524be4116101825780634c524be41461038c57806351eb05a6146103a95780635312ea8e146103c6578063630b5ba1146103e357806364482f79146103eb57610232565b806337c01f281461032d5780633ad10ef6146103355780634198709a14610359578063441a3e701461036157806348cd4cb11461038457610232565b80630bd075a1116102055780630bd075a1146102895780630f332a8a146102a657806312270c40146102c35780631526fe27146102cb57806317caf6f11461032557610232565b8063029dd6ba14610237578063061e26af14610251578063081e3eda14610279578063083c632314610281575b600080fd5b61023f6105b7565b60408051918252519081900360200190f35b6102776004803603602081101561026757600080fd5b50356001600160a01b03166105bc565b005b61023f610640565b61023f610646565b6102776004803603602081101561029f57600080fd5b503561064c565b61023f600480360360208110156102bc57600080fd5b50356106b3565b61027761071c565b6102e8600480360360208110156102e157600080fd5b5035610979565b604080516001600160a01b0390971687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b61023f6109c6565b61023f6109cc565b61033d6109d2565b604080516001600160a01b039092168252519081900360200190f35b61023f6109e1565b6102776004803603604081101561037757600080fd5b50803590602001356109e7565b61023f610b1b565b610277600480360360208110156103a257600080fd5b5035610b21565b610277600480360360208110156103bf57600080fd5b5035610b9d565b610277600480360360208110156103dc57600080fd5b5035610cf4565b610277610da7565b6102776004803603606081101561040157600080fd5b50803590602081013590604001351515610dca565b61023f610ee7565b610277610eed565b6102776004803603602081101561043c57600080fd5b5035610f99565b6102776004803603602081101561045957600080fd5b503561129d565b6104686113bf565b604080519115158252519081900360200190f35b61033d6113c8565b61023f6004803603604081101561049a57600080fd5b50803590602001356113d7565b6104d3600480360360408110156104bd57600080fd5b50803590602001356001600160a01b03166113f4565b6040805192835260208301919091528051918290030190f35b61023f611418565b61023f61141e565b61023f61144c565b6102776004803603602081101561051a57600080fd5b50356001600160a01b0316611452565b61023f6114d6565b61023f6004803603604081101561054857600080fd5b50803590602001356001600160a01b03166114dc565b61033d6115dc565b6102776004803603604081101561057c57600080fd5b50803590602001356115eb565b61033d6116d7565b610277600480360360208110156105a757600080fd5b50356001600160a01b03166116e6565b603281565b6105c461195f565b6001600160a01b03166105d56113c8565b6001600160a01b03161461061e576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60075490565b600b5481565b61065461195f565b6001600160a01b03166106656113c8565b6001600160a01b0316146106ae576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b600655565b6000806106ca6106c4436001611902565b436113d7565b905061071560095461070f600786815481106106e257fe5b9060005260206000209060060201600201546107096005548661184290919063ffffffff16565b90611842565b9061189b565b9392505050565b600a5443101561075d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611fe56026913960400191505060405180910390fd5b600b5443101561079e5760405162461bcd60e51b8152600401808060200182810382526027815260200180611f4c6027913960400191505060405180910390fd5b600d5460ff166107df5760405162461bcd60e51b815260040180806020018281038252602b815260200180611f99602b913960400191505060405180910390fd5b436004541061081f5760405162461bcd60e51b815260040180806020018281038252602281526020018061202b6022913960400191505060405180910390fd5b6000600b5443116108305743610834565b600b545b90506000610844600454836113d7565b9050600061085d6005548361184290919063ffffffff16565b6001546002549192506001600160a01b03908116916340c10f19911661088a61271061070f866032611842565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b50506001546003546001600160a01b0391821693506340c10f1992501661091261271061070f866032611842565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b5050436004555050505050565b6007818154811061098657fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909286565b60095481565b61271081565b6002546001600160a01b031681565b60055481565b6000600783815481106109f657fe5b600091825260208083208684526008825260408085203386529092529220805460069092029092019250831115610a5e5760405162461bcd60e51b815260040180806020018281038252602b815260200180611efb602b913960400191505060405180910390fd5b6001820154610a6d9084611902565b6001830155610a7b84610b9d565b805415610aba57610ab4610aa964e8d4a5100061070f8560040154856000015461184290919063ffffffff16565b6001830154906117e8565b60018201555b8054610ac69084611902565b81558154610ade906001600160a01b03163385611963565b604080518481529051859133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b600a5481565b610b2961195f565b6001600160a01b0316610b3a6113c8565b6001600160a01b031614610b83576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b610b8b610da7565b600d805460ff19166001179055600c55565b600060078281548110610bac57fe5b9060005260206000209060060201905080600301544311610bcd5750610cf1565b600181015480610be4575043600390910155610cf1565b6000600b544311610bf55743610bf9565b600b545b90506000610c0b8460030154836113d7565b90506000610c3e61271061070f6126ac61070960095461070f8b600201546107096005548b61184290919063ffffffff16565b9050610c61610c568561070f8464e8d4a51000611842565b6004870154906117e8565b60048601554360038601556005850154610c7b90826117e8565b6005860155600154604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b158015610cd357600080fd5b505af1158015610ce7573d6000803e3d6000fd5b5050505050505050505b50565b600060078281548110610d0357fe5b60009182526020808320858452600882526040808520338652909252922080546006929092029092016001810154909350610d3d91611902565b60018084019190915560008083559082018190558254610d6a916001600160a01b03909116903390611963565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a3505050565b60075460005b81811015610dc657610dbe81610b9d565b600101610dad565b5050565b610dd261195f565b6001600160a01b0316610de36113c8565b6001600160a01b031614610e2c576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b600d5460ff1615610e6e5760405162461bcd60e51b8152600401808060200182810382526028815260200180611ead6028913960400191505060405180910390fd5b8015610e7c57610e7c610da7565b610eb982610eb360078681548110610e9057fe5b90600052602060002090600602016002015460095461190290919063ffffffff16565b906117e8565b6009819055508160078481548110610ecd57fe5b906000526020600020906006020160020181905550505050565b60065481565b610ef561195f565b6001600160a01b0316610f066113c8565b6001600160a01b031614610f4f576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600060078281548110610fa857fe5b600091825260208083208584526008825260408085203386529092529220600a54600690920290920192504310156110115760405162461bcd60e51b8152600401808060200182810382526026815260200180611fe56026913960400191505060405180910390fd5b600b544310156110525760405162461bcd60e51b8152600401808060200182810382526027815260200180611f4c6027913960400191505060405180910390fd5b600d5460ff166110935760405162461bcd60e51b815260040180806020018281038252602b815260200180611f99602b913960400191505060405180910390fd5b600c5483146110d35760405162461bcd60e51b8152600401808060200182810382526026815260200180611f736026913960400191505060405180910390fd5b6110dc83610b9d565b600061111061110564e8d4a5100061070f8660040154866000015461184290919063ffffffff16565b6001840154906117e8565b9050600061112b84600501548361189b90919063ffffffff16565b60075490915060005b818110156111df57600c5481146111d75761114d611e6d565b6007828154811061115a57fe5b60009182526020918290206040805160c081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460a082018190529091506111d3906111cc908690611842565b86906117e8565b9450505b600101611134565b5083541561125457835460018601546111f791611902565b600186015583548554611217916001600160a01b03909116903390611963565b83546040805191825251879133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3600084555b61125e33846119ba565b604080518481529051879133917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf79181900360200190a3505050505050565b6112a561195f565b6001600160a01b03166112b66113c8565b6001600160a01b0316146112ff576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b6801a055690d9db8000081111561135d576040805162461bcd60e51b815260206004820152601860248201527f4475656c4576656e743a204d61782070657220626c6f636b0000000000000000604482015290519081900360640190fd5b670de0b6b3a76400008110156113ba576040805162461bcd60e51b815260206004820152601860248201527f4475656c4576656e743a204d696e2070657220626c6f636b0000000000000000604482015290519081900360640190fd5b600555565b600d5460ff1681565b6000546001600160a01b031690565b6006546000906113eb906107098486611902565b90505b92915050565b60086020908152600092835260408084209091529082529020805460019091015482565b60045481565b60008061142f6106c4436001611902565b90506114466005548261184290919063ffffffff16565b91505090565b6126ac81565b61145a61195f565b6001600160a01b031661146b6113c8565b6001600160a01b0316146114b4576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600c5481565b600080600784815481106114ec57fe5b600091825260208083208784526008825260408085206001600160a01b0389168652909252922060046006909202909201908101546001820154600383015492945090914311801561153d57508015155b156115ba576000600b5443116115535743611557565b600b545b905060006115698660030154836113d7565b9050600061159c61271061070f6126ac61070960095461070f8d600201546107096005548b61184290919063ffffffff16565b90506115b46111cc8561070f8464e8d4a51000611842565b94505050505b82546115d19064e8d4a510009061070f9085611842565b979650505050505050565b6001546001600160a01b031681565b6000600783815481106115fa57fe5b600091825260208083208684526008825260408085203386529092529220600160069092029092019081015490925061163390846117e8565b600183015561164184610b9d565b8054156116755761166f610aa964e8d4a5100061070f8560040154856000015461184290919063ffffffff16565b60018201555b805461168190846117e8565b8155815461169a906001600160a01b0316333086611b4a565b604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b6003546001600160a01b031681565b6116ee61195f565b6001600160a01b03166116ff6113c8565b6001600160a01b031614611748576040805162461bcd60e51b8152602060048201819052602482015260008051602061200b833981519152604482015290519081900360640190fd5b6001600160a01b03811661178d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ed56026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828201838110156113eb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082611851575060006113ee565b8282028284828161185e57fe5b04146113eb5760405162461bcd60e51b8152600401808060200182810382526021815260200180611fc46021913960400191505060405180910390fd5b60008082116118f1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816118fa57fe5b049392505050565b600082821115611959576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526119b5908490611baa565b505050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a0557600080fd5b505afa158015611a19573d6000803e3d6000fd5b505050506040513d6020811015611a2f57600080fd5b5051905080821115611ac3576001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611a9157600080fd5b505af1158015611aa5573d6000803e3d6000fd5b505050506040513d6020811015611abb57600080fd5b506119b59050565b6001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611b1957600080fd5b505af1158015611b2d573d6000803e3d6000fd5b505050506040513d6020811015611b4357600080fd5b5050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ba4908590611baa565b50505050565b6060611bff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c5b9092919063ffffffff16565b8051909150156119b557808060200190516020811015611c1e57600080fd5b50516119b55760405162461bcd60e51b815260040180806020018281038252602a81526020018061204d602a913960400191505060405180910390fd5b6060611c6a8484600085611c72565b949350505050565b606082471015611cb35760405162461bcd60e51b8152600401808060200182810382526026815260200180611f266026913960400191505060405180910390fd5b611cbc85611dc3565b611d0d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611d4c5780518252601f199092019160209182019101611d2d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611dae576040519150601f19603f3d011682016040523d82523d6000602084013e611db3565b606091505b50915091506115d1828286611dc9565b3b151590565b60608315611dd8575081610715565b825115611de85782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e32578181015183820152602001611e1a565b50505050905090810190601f168015611e5f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060c0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152509056fe4475656c4576656e743a2057696e6e657220706f6f6c20686173206265656e2073656c65637465644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734475656c4576656e743a205769746864726177616c20616d6f756e74206578636565642062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4475656c4576656e743a204661726d696e6720686173206e6f742066696e6973686564207965744475656c4576656e743a2043616e6e6f7420636c61696d2066726f6d206c6f736520706f6f6c4475656c4576656e743a2057696e6e657220706f6f6c20686173206e6f742073656c656374656420796574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774475656c4576656e743a204661726d696e6720686173206e6f742073746172746564207965744f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724475656c4576656e743a205265776172647320616c726561647920636c61696d65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122003ca6eb37c36bfe988c9c3ac7affc468fc136094ca6d4e25922a0c5d4cda8c6764736f6c634300060c00334475656c4576656e743a2057696e6e657220706f6f6c20686173206265656e2073656c6563746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAndExit(uint256)": {
        "details": "Returns pending rewards for user."
      },
      "deposit(uint256,uint256)": {
        "details": "Deposit LP tokens to the pool for reward token allocation."
      },
      "emergencyWithdraw(uint256)": {
        "details": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "getBaseRewardPerBlock()": {
        "details": "Returns the pool specific reward per block."
      },
      "getMultiplier(uint256,uint256)": {
        "details": "Returns reward multiplier over the given _from to _to block."
      },
      "getPoolRewardPerBlock(uint256)": {
        "details": "Returns the pool specific reward per block."
      },
      "massUpdatePools()": {
        "details": "Updates reward vairables for all pools. Be careful of gas spending!"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRewards(uint256,address)": {
        "details": "Returns pending rewards for user."
      },
      "poolLength()": {
        "details": "Returns the poolInfo length."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "selectWinner(uint256)": {
        "details": "Select winner pool. Can only be called by the owner."
      },
      "set(uint256,uint256,bool)": {
        "details": "Updates pool allocation points. Can only be called by the owner."
      },
      "setDevAddress(address)": {
        "details": "Updates dev address, only owner."
      },
      "setPerBlock(uint256)": {
        "details": "Updates reward per block, only owner."
      },
      "setRefAddress(address)": {
        "details": "Updates ref address, only owner."
      },
      "setRewardMultiplier(uint256)": {
        "details": "Updates reward multiplier, only owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "details": "Updates reward vairables for the pool."
      },
      "withdraw(uint256,uint256)": {
        "details": "Withdraw LP tokens from the pool."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2631,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "DUEL",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DuelToken)3942"
      },
      {
        "astId": 2645,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "devAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2647,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "refAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2649,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "lastBlockDevWithdraw",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2651,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "tokenPerBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2654,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "rewardMultiplier",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2657,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)2629_storage)dyn_storage"
      },
      {
        "astId": 2663,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2616_storage))"
      },
      {
        "astId": 2666,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2668,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "startBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2670,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "endBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2672,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "winnerPoolId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2675,
        "contract": "contracts/DuelEvent.sol:DuelEvent",
        "label": "winnerSelected",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)2629_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)2629_storage",
        "encoding": "dynamic_array",
        "label": "struct DuelEvent.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DuelToken)3942": {
        "encoding": "inplace",
        "label": "contract DuelToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1104": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2616_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DuelEvent.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2616_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2616_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DuelEvent.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2616_storage)"
      },
      "t_struct(PoolInfo)2629_storage": {
        "encoding": "inplace",
        "label": "struct DuelEvent.PoolInfo",
        "members": [
          {
            "astId": 2618,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1104"
          },
          {
            "astId": 2620,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2622,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2624,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2626,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2628,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "totalRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)2616_storage": {
        "encoding": "inplace",
        "label": "struct DuelEvent.UserInfo",
        "members": [
          {
            "astId": 2613,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2615,
            "contract": "contracts/DuelEvent.sol:DuelEvent",
            "label": "pendingReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
